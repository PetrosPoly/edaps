/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/utils/setup_env.py:38: UserWarning: Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/utils/setup_env.py:48: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
2023-07-28 17:43:18,728 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.5 (default, Sep  4 2020, 07:30:14) [GCC 7.3.0]
CUDA available: True
GPU 0: NVIDIA GeForce GTX TITAN X
CUDA_HOME: /usr
NVCC: Cuda compilation tools, release 11.2, V11.2.152
GCC: gcc (Debian 8.3.0-6) 8.3.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.8.0
MMCV: 1.6.1
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.25.1+2a2044c
------------------------------------------------------------

2023-07-28 17:43:20,349 - mmdet - INFO - Distributed training: False
2023-07-28 17:43:21,982 - mmdet - INFO - Config:
checkpoint_config = dict(interval=40000, by_epoch=False, max_keep_ckpts=1)
log_config = dict(interval=20, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
num_instance_classes = 8
norm_cfg = dict(type='BN', requires_grad=True)
find_unused_parameters = True
maskrcnn_losses_weights = 1.0
model = dict(
    type='MaskRCNNPanoptic',
    pretrained='pretrained/mit_b5.pth',
    backbone=dict(type='mit_b5', style='pytorch'),
    use_neck_feat_for_decode_head=False,
    decode_head=dict(
        type='DAFormerHead',
        in_channels=[64, 128, 320, 512],
        in_index=[0, 1, 2, 3],
        channels=256,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        decoder_params=dict(
            embed_dims=256,
            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),
            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),
            fusion_cfg=dict(
                type='aspp',
                sep=True,
                dilations=(1, 6, 12, 18),
                pool=False,
                act_cfg=dict(type='ReLU'),
                norm_cfg=dict(type='BN', requires_grad=True))),
        loss_decode=dict(
            type='CrossEntropyLossMmseg', use_sigmoid=False, loss_weight=1.0)),
    neck=dict(
        type='FPN',
        in_channels=[64, 128, 320, 512],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=8,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=8,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False),
        work_dir=
        'edaps_experiments/exp-00001/work_dirs/local-exp00001/230728_1743_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_6a7c6'
    ),
    test_cfg=dict(
        mode='whole',
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CityscapesDataset'
data_root = 'data/cityscapes/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 512)
num_classes = 19
synthia_train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadPanopticAnnotations'),
    dict(type='Resize', img_scale=(1280, 760)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(
        type='GenPanopLabelsForMaskFormer',
        sigma=8,
        mode='train',
        num_classes=19,
        gen_instance_classids_from_zero=True),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundleMmdet'),
    dict(
        type='Collect',
        keys=[
            'img', 'gt_bboxes', 'gt_labels', 'gt_masks', 'gt_semantic_seg',
            'gt_panoptic_only_thing_classes', 'max_inst_per_class'
        ])
]
cityscapes_train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=(1024, 512)),
    dict(type='RandomCrop', crop_size=(512, 512)),
    dict(type='RandomFlip', prob=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundleMmdet'),
    dict(type='Collect', keys=['img'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=4,
    train=dict(
        type='UDADataset',
        source=dict(
            type='SynthiaDataset',
            data_root='data/synthia/',
            img_dir='RGB',
            depth_dir='',
            ann_dir='panoptic-labels-crowdth-0-for-daformer/synthia_panoptic',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='LoadPanopticAnnotations'),
                dict(type='Resize', img_scale=(1280, 760)),
                dict(
                    type='RandomCrop',
                    crop_size=(512, 512),
                    cat_max_ratio=0.75),
                dict(type='RandomFlip', prob=0.5),
                dict(
                    type='GenPanopLabelsForMaskFormer',
                    sigma=8,
                    mode='train',
                    num_classes=19,
                    gen_instance_classids_from_zero=True),
                dict(
                    type='Normalize',
                    mean=[123.675, 116.28, 103.53],
                    std=[58.395, 57.12, 57.375],
                    to_rgb=True),
                dict(type='DefaultFormatBundleMmdet'),
                dict(
                    type='Collect',
                    keys=[
                        'img', 'gt_bboxes', 'gt_labels', 'gt_masks',
                        'gt_semantic_seg', 'gt_panoptic_only_thing_classes',
                        'max_inst_per_class'
                    ])
            ]),
        target=dict(
            type='CityscapesDataset',
            data_root='data/cityscapes/',
            img_dir='leftImg8bit/train',
            depth_dir='',
            ann_dir='gtFine_panoptic/cityscapes_panoptic_train_trainId',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='Resize', img_scale=(1024, 512)),
                dict(type='RandomCrop', crop_size=(512, 512)),
                dict(type='RandomFlip', prob=0.5),
                dict(
                    type='Normalize',
                    mean=[123.675, 116.28, 103.53],
                    std=[58.395, 57.12, 57.375],
                    to_rgb=True),
                dict(type='DefaultFormatBundleMmdet'),
                dict(type='Collect', keys=['img'])
            ]),
        rare_class_sampling=dict(
            min_pixels=3000, class_temp=0.01, min_crop_ratio=0.5)),
    val=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes',
        img_dir='leftImg8bit/val',
        depth_dir='',
        ann_dir='gtFine_panoptic/cityscapes_panoptic_val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/val',
        depth_dir='',
        ann_dir='gtFine_panoptic/cityscapes_panoptic_val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
uda = dict(
    type='DACS',
    alpha=0.999,
    pseudo_threshold=0.968,
    pseudo_weight_ignore_top=15,
    pseudo_weight_ignore_bottom=120,
    imnet_feature_dist_lambda=0.005,
    imnet_feature_dist_classes=[6, 7, 11, 12, 13, 14, 15, 16, 17, 18],
    imnet_feature_dist_scale_min_ratio=0.75,
    mix='class',
    blur=True,
    color_jitter_strength=0.2,
    color_jitter_probability=0.2,
    debug_img_interval=1000,
    print_grad_magnitude=False,
    share_src_backward=True,
    disable_mix_masks=False)
use_ddp_wrapper = True
optimizer = dict(
    type='AdamW',
    lr=6e-05,
    betas=(0.9, 0.999),
    weight_decay=0.01,
    paramwise_cfg=dict(
        custom_keys=dict(
            neck=dict(lr_mult=10.0),
            head=dict(lr_mult=10.0),
            pos_block=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0))))
optimizer_config = None
lr_config = dict(
    policy='poly',
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06,
    power=1.0,
    min_lr=0.0,
    by_epoch=False)
debug = False
n_gpus = 1
gpu_mtotal = 23000
total_train_time = '21:00:00'
n_cpus = 16
mem_per_cpu = 16000
machine = 'local'
euler_template_fname = 'euler_template_slurm_syn2city.sh'
only_eval = False
only_train = False
activate_auto_scale_lr = False
auto_scale_lr = dict(enable=False, base_batch_size=16)
print_layer_wise_lr = False
file_sys = 'Slurm'
launcher = None
generate_only_visuals_without_eval = False
seed = 0
evaluation = dict(
    interval=40000,
    metric=['mIoU', 'mPQ', 'mAP'],
    eval_type='maskrcnn_panoptic',
    dataset_name='cityscapes',
    gt_dir='data/cityscapes/gtFine/val',
    gt_dir_panop='data/cityscapes/gtFine_panoptic',
    num_samples_debug=12,
    post_proccess_params=dict(
        num_classes=19,
        ignore_label=255,
        mapillary_dataloading_style='OURS',
        label_divisor=1000,
        train_id_to_eval_id=[
            7, 8, 11, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31,
            32, 33, 0
        ],
        thing_list=[11, 12, 13, 14, 15, 16, 17, 18],
        mask_score_threshold=0.95,
        debug=False,
        dump_semantic_pred_as_numpy_array=False,
        load_semantic_pred_as_numpy_array=False,
        semantic_pred_numpy_array_location=None,
        use_semantic_decoder_for_instance_labeling=False,
        use_semantic_decoder_for_panoptic_labeling=False,
        nms_th=None,
        intersec_th=None,
        upsnet_mask_pruning=False,
        generate_thing_cls_panoptic_from_instance_pred=False),
    visuals_pan_eval=False,
    evalScale='2048x1024',
    panop_eval_folder=
    'edaps_experiments/exp-00001/work_dirs/local-exp00001/230728_1743_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_6a7c6/panoptic_eval',
    panop_eval_temp_folder=
    'edaps_experiments/exp-00001/work_dirs/local-exp00001/230728_1743_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_6a7c6/panoptic_eval/panop_eval_28-07-2023_17-43-18-573896',
    debug=False,
    out_dir=
    'edaps_experiments/exp-00001/work_dirs/local-exp00001/230728_1743_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_6a7c6/panoptic_eval/panop_eval_28-07-2023_17-43-18-573896/visuals'
)
runner = dict(type='IterBasedRunner', max_iters=40000)
name = '230728_1743_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_6a7c6'
exp = 1
exp_root = 'edaps_experiments'
exp_sub = 'exp-00001'
name_dataset = ('synthia2cityscapes', )
name_architecture = ('maskrcnn_mitb5', )
name_encoder = ('mitb5', )
name_decoder = ('maskrcnn', )
name_uda = ('dacs_rcs0.01_cpl', )
name_opt = ('adamw_6e-05_pmTrue_poly10warm_1x1_40k', )
work_dir = 'edaps_experiments/exp-00001/work_dirs/local-exp00001/230728_1743_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_6a7c6'
git_rev = '2a2044c49e116d4693884d4a9a6e08b824a9b128'
auto_resume = False
gpu_ids = [0]

2023-07-28 17:43:21,983 - mmdet - INFO - Set random seed to 0, deterministic: False
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/detectors/two_stage.py:29: UserWarning: DeprecationWarning: pretrained is deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is deprecated, '
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/backbones/mix_transformer.py:215: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead')
2023-07-28 17:43:26,156 - mmdet - INFO - Load mit checkpoint.
2023-07-28 17:43:26,157 - mmdet - INFO - load checkpoint from local path: pretrained/mit_b5.pth
2023-07-28 17:43:26,616 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-07-28 17:43:26,640 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-07-28 17:43:26,647 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-07-28 17:43:26,780 - mmdet - INFO - initialize DAFormerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-07-28 17:43:26,852 - mmdet - INFO - Load mit checkpoint.
2023-07-28 17:43:26,852 - mmdet - INFO - load checkpoint from local path: pretrained/mit_b5.pth
2023-07-28 17:43:27,207 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-07-28 17:43:27,229 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-07-28 17:43:27,237 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-07-28 17:43:27,370 - mmdet - INFO - initialize DAFormerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-07-28 17:43:27,442 - mmdet - INFO - Load mit checkpoint.
2023-07-28 17:43:27,442 - mmdet - INFO - load checkpoint from local path: pretrained/mit_b5.pth
2023-07-28 17:43:27,804 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-07-28 17:43:27,826 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-07-28 17:43:27,833 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-07-28 17:43:27,967 - mmdet - INFO - initialize DAFormerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-07-28 17:43:28,084 - mmseg - INFO - Loaded annotations from : data/synthia/panoptic-labels-crowdth-0-for-daformer/synthia_panoptic.json
2023-07-28 17:43:33,821 - mmseg - INFO - Loaded 9400 images from data/synthia/RGB
2023-07-28 17:43:33,826 - mmseg - INFO - Loaded annotations from : data/cityscapes/gtFine_panoptic/cityscapes_panoptic_train_trainId.json
2023-07-28 17:43:34,046 - mmseg - INFO - Loaded 2975 images from data/cityscapes/leftImg8bit/train
2023-07-28 17:43:34,118 - mmseg - INFO - RCS Classes: [6, 7, 17, 18, 4, 3, 12, 5, 15, 13, 11, 10, 8, 0, 1, 2]
2023-07-28 17:43:34,119 - mmseg - INFO - RCS ClassProb: [1.55649453e-01 1.45927146e-01 1.30805254e-01 1.29144296e-01
 1.22819245e-01 1.22646019e-01 9.97279957e-02 5.53424992e-02
 3.33626680e-02 2.43163528e-03 2.00466975e-03 1.35448776e-04
 3.78220921e-06 8.31826052e-10 3.41141226e-10 1.11511794e-14]
2023-07-28 17:43:37,401 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-07-28 17:43:48,369 - mmseg - INFO - Loaded annotations from : data/cityscapes/gtFine_panoptic/cityscapes_panoptic_val.json
2023-07-28 17:43:48,414 - mmseg - INFO - Loaded 500 images from data/cityscapes/leftImg8bit/val
2023-07-28 17:43:48,415 - mmdet - INFO - Start running, host: ppolydorou@biwirender11, work_dir: /scratch_net/biwidl202/ppolydorou/project_edaps/edaps/edaps_experiments/exp-00001/work_dirs/local-exp00001/230728_1743_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_6a7c6
2023-07-28 17:43:48,415 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHookUDA                        
 -------------------- 
after_train_iter:
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-07-28 17:43:48,415 - mmdet - INFO - workflow: [('train', 1)], max: 40000 iters
2023-07-28 17:43:48,416 - mmdet - INFO - Checkpoints will be saved to /scratch_net/biwidl202/ppolydorou/project_edaps/edaps/edaps_experiments/exp-00001/work_dirs/local-exp00001/230728_1743_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_6a7c6 by HardDiskBackend.
2023-07-28 17:43:48,416 - mmdet - INFO - The best checkpoint will be saved to edaps_experiments/exp-00001/work_dirs/local-exp00001/230728_1743_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_6a7c6/panoptic_eval/panop_eval_28-07-2023_17-43-18-573896/visuals/230728_1743_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_6a7c6 by HardDiskBackend
training with predefined config : configs/edaps/syn2cs_uda_warm_dfthings_rcs_croppl_a999_edaps_s0.py
Run job syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0
2023-07-28 17:46:16,727 - mmdet - INFO - Iter [20/40000]	lr: 7.597e-07, eta: 3 days, 8:45:37, time: 7.272, data_time: 0.257, memory: 9322, decode.loss_seg: 2.8129, decode.acc_seg: 5.4581, rpn.loss_rpn_cls: 0.6924, rpn.loss_rpn_bbox: 0.3348, roi.loss_cls: 2.1459, roi.acc: 19.3506, roi.loss_bbox: 0.0911, roi.loss_mask: 2.3533, src.loss_imnet_feat_dist: 0.0663, mix.decode.loss_seg: 1.5454, mix.decode.acc_seg: 12.2909
2023-07-28 17:48:33,953 - mmdet - INFO - Iter [40/40000]	lr: 1.559e-06, eta: 3 days, 6:26:23, time: 6.861, data_time: 0.020, memory: 9322, decode.loss_seg: 2.7702, decode.acc_seg: 10.9821, rpn.loss_rpn_cls: 0.6838, rpn.loss_rpn_bbox: 0.3123, roi.loss_cls: 0.9727, roi.acc: 82.2803, roi.loss_bbox: 0.1223, roi.loss_mask: 1.6724, src.loss_imnet_feat_dist: 0.0668, mix.decode.loss_seg: 1.4600, mix.decode.acc_seg: 15.1352
2023-07-28 17:50:52,243 - mmdet - INFO - Iter [60/40000]	lr: 2.357e-06, eta: 3 days, 5:50:16, time: 6.915, data_time: 0.019, memory: 9322, decode.loss_seg: 2.7175, decode.acc_seg: 22.0070, rpn.loss_rpn_cls: 0.6708, rpn.loss_rpn_bbox: 0.2906, roi.loss_cls: 0.6618, roi.acc: 84.9023, roi.loss_bbox: 0.1713, roi.loss_mask: 1.2576, src.loss_imnet_feat_dist: 0.0708, mix.decode.loss_seg: 1.3633, mix.decode.acc_seg: 20.2042
2023-07-28 17:53:09,116 - mmdet - INFO - Iter [80/40000]	lr: 3.154e-06, eta: 3 days, 5:19:16, time: 6.844, data_time: 0.019, memory: 9322, decode.loss_seg: 2.6223, decode.acc_seg: 35.4250, rpn.loss_rpn_cls: 0.6562, rpn.loss_rpn_bbox: 0.2998, roi.loss_cls: 0.6054, roi.acc: 82.5146, roi.loss_bbox: 0.2560, roi.loss_mask: 0.9711, src.loss_imnet_feat_dist: 0.0720, mix.decode.loss_seg: 1.5580, mix.decode.acc_seg: 29.3439
2023-07-28 17:55:26,044 - mmdet - INFO - Iter [100/40000]	lr: 3.950e-06, eta: 3 days, 5:00:08, time: 6.846, data_time: 0.019, memory: 9353, decode.loss_seg: 2.4582, decode.acc_seg: 49.2417, rpn.loss_rpn_cls: 0.6287, rpn.loss_rpn_bbox: 0.2656, roi.loss_cls: 0.5216, roi.acc: 84.4141, roi.loss_bbox: 0.2338, roi.loss_mask: 0.8525, src.loss_imnet_feat_dist: 0.0780, mix.decode.loss_seg: 1.3969, mix.decode.acc_seg: 40.2169
2023-07-28 17:57:44,168 - mmdet - INFO - Iter [120/40000]	lr: 4.746e-06, eta: 3 days, 4:53:14, time: 6.906, data_time: 0.020, memory: 9353, decode.loss_seg: 2.3347, decode.acc_seg: 57.0485, rpn.loss_rpn_cls: 0.5912, rpn.loss_rpn_bbox: 0.2648, roi.loss_cls: 0.5158, roi.acc: 83.8330, roi.loss_bbox: 0.2569, roi.loss_mask: 0.7737, src.loss_imnet_feat_dist: 0.0828, mix.decode.loss_seg: 1.2349, mix.decode.acc_seg: 48.3239
2023-07-28 18:00:01,120 - mmdet - INFO - Iter [140/40000]	lr: 5.541e-06, eta: 3 days, 4:42:05, time: 6.848, data_time: 0.019, memory: 9354, decode.loss_seg: 2.1307, decode.acc_seg: 56.4837, rpn.loss_rpn_cls: 0.5390, rpn.loss_rpn_bbox: 0.2535, roi.loss_cls: 0.5600, roi.acc: 83.1885, roi.loss_bbox: 0.3275, roi.loss_mask: 0.7298, src.loss_imnet_feat_dist: 0.0857, mix.decode.loss_seg: 1.0353, mix.decode.acc_seg: 53.4796
2023-07-28 18:02:19,201 - mmdet - INFO - Iter [160/40000]	lr: 6.335e-06, eta: 3 days, 4:37:50, time: 6.904, data_time: 0.019, memory: 9354, decode.loss_seg: 2.0080, decode.acc_seg: 61.4581, rpn.loss_rpn_cls: 0.4386, rpn.loss_rpn_bbox: 0.2360, roi.loss_cls: 0.5754, roi.acc: 81.8066, roi.loss_bbox: 0.4292, roi.loss_mask: 0.7036, src.loss_imnet_feat_dist: 0.0892, mix.decode.loss_seg: 1.0869, mix.decode.acc_seg: 58.0693
2023-07-28 18:04:36,244 - mmdet - INFO - Iter [180/40000]	lr: 7.128e-06, eta: 3 days, 4:30:12, time: 6.852, data_time: 0.018, memory: 9354, decode.loss_seg: 1.8399, decode.acc_seg: 60.9559, rpn.loss_rpn_cls: 0.3446, rpn.loss_rpn_bbox: 0.2385, roi.loss_cls: 0.6091, roi.acc: 78.7207, roi.loss_bbox: 0.4831, roi.loss_mask: 0.6847, src.loss_imnet_feat_dist: 0.0963, mix.decode.loss_seg: 0.9916, mix.decode.acc_seg: 59.7857
2023-07-28 18:06:53,644 - mmdet - INFO - Iter [200/40000]	lr: 7.920e-06, eta: 3 days, 4:24:49, time: 6.870, data_time: 0.019, memory: 9354, decode.loss_seg: 1.6686, decode.acc_seg: 65.1047, rpn.loss_rpn_cls: 0.2814, rpn.loss_rpn_bbox: 0.2409, roi.loss_cls: 0.6511, roi.acc: 77.8516, roi.loss_bbox: 0.5818, roi.loss_mask: 0.6631, src.loss_imnet_feat_dist: 0.0972, mix.decode.loss_seg: 0.7347, mix.decode.acc_seg: 63.2266
2023-07-28 18:09:11,400 - mmdet - INFO - Iter [220/40000]	lr: 8.712e-06, eta: 3 days, 4:21:04, time: 6.888, data_time: 0.018, memory: 9355, decode.loss_seg: 1.5790, decode.acc_seg: 65.2011, rpn.loss_rpn_cls: 0.2497, rpn.loss_rpn_bbox: 0.2310, roi.loss_cls: 0.6771, roi.acc: 76.4990, roi.loss_bbox: 0.6127, roi.loss_mask: 0.6520, src.loss_imnet_feat_dist: 0.1021, mix.decode.loss_seg: 0.7412, mix.decode.acc_seg: 63.0456
2023-07-28 18:11:28,742 - mmdet - INFO - Iter [240/40000]	lr: 9.503e-06, eta: 3 days, 4:16:25, time: 6.867, data_time: 0.018, memory: 9355, decode.loss_seg: 1.4314, decode.acc_seg: 68.4991, rpn.loss_rpn_cls: 0.2280, rpn.loss_rpn_bbox: 0.2575, roi.loss_cls: 0.6854, roi.acc: 75.2002, roi.loss_bbox: 0.6627, roi.loss_mask: 0.6367, src.loss_imnet_feat_dist: 0.1023, mix.decode.loss_seg: 0.6672, mix.decode.acc_seg: 64.7070
2023-07-28 18:13:45,697 - mmdet - INFO - Iter [260/40000]	lr: 1.029e-05, eta: 3 days, 4:11:08, time: 6.848, data_time: 0.018, memory: 9355, decode.loss_seg: 1.3064, decode.acc_seg: 69.9552, rpn.loss_rpn_cls: 0.2222, rpn.loss_rpn_bbox: 0.2043, roi.loss_cls: 0.6195, roi.acc: 78.4521, roi.loss_bbox: 0.6221, roi.loss_mask: 0.6186, src.loss_imnet_feat_dist: 0.1030, mix.decode.loss_seg: 0.6568, mix.decode.acc_seg: 65.6137
2023-07-28 18:16:03,610 - mmdet - INFO - Iter [280/40000]	lr: 1.108e-05, eta: 3 days, 4:08:33, time: 6.896, data_time: 0.018, memory: 9355, decode.loss_seg: 1.2807, decode.acc_seg: 71.1251, rpn.loss_rpn_cls: 0.1961, rpn.loss_rpn_bbox: 0.1921, roi.loss_cls: 0.6570, roi.acc: 77.3975, roi.loss_bbox: 0.6673, roi.loss_mask: 0.6139, src.loss_imnet_feat_dist: 0.1066, mix.decode.loss_seg: 0.6906, mix.decode.acc_seg: 63.5645
2023-07-28 18:18:20,957 - mmdet - INFO - Iter [300/40000]	lr: 1.187e-05, eta: 3 days, 4:04:46, time: 6.867, data_time: 0.019, memory: 9355, decode.loss_seg: 1.0762, decode.acc_seg: 73.5467, rpn.loss_rpn_cls: 0.1693, rpn.loss_rpn_bbox: 0.2004, roi.loss_cls: 0.6245, roi.acc: 77.3291, roi.loss_bbox: 0.6865, roi.loss_mask: 0.5944, src.loss_imnet_feat_dist: 0.1174, mix.decode.loss_seg: 0.5321, mix.decode.acc_seg: 69.4424
2023-07-28 18:20:37,922 - mmdet - INFO - Iter [320/40000]	lr: 1.266e-05, eta: 3 days, 4:00:22, time: 6.848, data_time: 0.018, memory: 9355, decode.loss_seg: 1.0852, decode.acc_seg: 71.5863, rpn.loss_rpn_cls: 0.1666, rpn.loss_rpn_bbox: 0.2068, roi.loss_cls: 0.6327, roi.acc: 77.4463, roi.loss_bbox: 0.7285, roi.loss_mask: 0.5886, src.loss_imnet_feat_dist: 0.1256, mix.decode.loss_seg: 0.5546, mix.decode.acc_seg: 67.9610
2023-07-28 18:22:56,131 - mmdet - INFO - Iter [340/40000]	lr: 1.345e-05, eta: 3 days, 3:58:39, time: 6.910, data_time: 0.018, memory: 9355, decode.loss_seg: 0.9695, decode.acc_seg: 72.9869, rpn.loss_rpn_cls: 0.1718, rpn.loss_rpn_bbox: 0.2160, roi.loss_cls: 0.6554, roi.acc: 76.8213, roi.loss_bbox: 0.6882, roi.loss_mask: 0.5827, src.loss_imnet_feat_dist: 0.1176, mix.decode.loss_seg: 0.5178, mix.decode.acc_seg: 65.7777
2023-07-28 18:25:13,164 - mmdet - INFO - Iter [360/40000]	lr: 1.423e-05, eta: 3 days, 3:54:42, time: 6.852, data_time: 0.018, memory: 9355, decode.loss_seg: 0.9683, decode.acc_seg: 73.9790, rpn.loss_rpn_cls: 0.1568, rpn.loss_rpn_bbox: 0.2039, roi.loss_cls: 0.5967, roi.acc: 77.7783, roi.loss_bbox: 0.7274, roi.loss_mask: 0.5628, src.loss_imnet_feat_dist: 0.1311, mix.decode.loss_seg: 0.4334, mix.decode.acc_seg: 71.8074
2023-07-28 18:27:31,374 - mmdet - INFO - Iter [380/40000]	lr: 1.502e-05, eta: 3 days, 3:52:58, time: 6.910, data_time: 0.018, memory: 9355, decode.loss_seg: 0.8937, decode.acc_seg: 74.8558, rpn.loss_rpn_cls: 0.1542, rpn.loss_rpn_bbox: 0.2130, roi.loss_cls: 0.5780, roi.acc: 78.4912, roi.loss_bbox: 0.7017, roi.loss_mask: 0.5552, src.loss_imnet_feat_dist: 0.1277, mix.decode.loss_seg: 0.4782, mix.decode.acc_seg: 68.7486
2023-07-28 18:29:48,282 - mmdet - INFO - Iter [400/40000]	lr: 1.580e-05, eta: 3 days, 3:49:02, time: 6.845, data_time: 0.018, memory: 9355, decode.loss_seg: 0.9192, decode.acc_seg: 73.1798, rpn.loss_rpn_cls: 0.1879, rpn.loss_rpn_bbox: 0.2073, roi.loss_cls: 0.5933, roi.acc: 78.7305, roi.loss_bbox: 0.6810, roi.loss_mask: 0.5659, src.loss_imnet_feat_dist: 0.1273, mix.decode.loss_seg: 0.4789, mix.decode.acc_seg: 67.6488
2023-07-28 18:32:04,689 - mmdet - INFO - Iter [420/40000]	lr: 1.658e-05, eta: 3 days, 3:44:28, time: 6.820, data_time: 0.018, memory: 9355, decode.loss_seg: 0.8325, decode.acc_seg: 76.4349, rpn.loss_rpn_cls: 0.1842, rpn.loss_rpn_bbox: 0.1824, roi.loss_cls: 0.5785, roi.acc: 79.1650, roi.loss_bbox: 0.6745, roi.loss_mask: 0.5682, src.loss_imnet_feat_dist: 0.1343, mix.decode.loss_seg: 0.4514, mix.decode.acc_seg: 67.6341
2023-07-28 18:34:22,634 - mmdet - INFO - Iter [440/40000]	lr: 1.737e-05, eta: 3 days, 3:42:25, time: 6.897, data_time: 0.018, memory: 9355, decode.loss_seg: 0.8082, decode.acc_seg: 72.9418, rpn.loss_rpn_cls: 0.1589, rpn.loss_rpn_bbox: 0.1926, roi.loss_cls: 0.5709, roi.acc: 79.5166, roi.loss_bbox: 0.6634, roi.loss_mask: 0.5469, src.loss_imnet_feat_dist: 0.1351, mix.decode.loss_seg: 0.4054, mix.decode.acc_seg: 67.7148
2023-07-28 18:36:39,547 - mmdet - INFO - Iter [460/40000]	lr: 1.815e-05, eta: 3 days, 3:38:52, time: 6.846, data_time: 0.018, memory: 9355, decode.loss_seg: 0.7090, decode.acc_seg: 78.5889, rpn.loss_rpn_cls: 0.1464, rpn.loss_rpn_bbox: 0.2111, roi.loss_cls: 0.5533, roi.acc: 79.4434, roi.loss_bbox: 0.6922, roi.loss_mask: 0.5372, src.loss_imnet_feat_dist: 0.1361, mix.decode.loss_seg: 0.3362, mix.decode.acc_seg: 69.8584
2023-07-28 18:38:56,779 - mmdet - INFO - Iter [480/40000]	lr: 1.893e-05, eta: 3 days, 3:35:52, time: 6.862, data_time: 0.018, memory: 9355, decode.loss_seg: 0.7575, decode.acc_seg: 76.5107, rpn.loss_rpn_cls: 0.1457, rpn.loss_rpn_bbox: 0.1976, roi.loss_cls: 0.5518, roi.acc: 79.2236, roi.loss_bbox: 0.6699, roi.loss_mask: 0.5336, src.loss_imnet_feat_dist: 0.1257, mix.decode.loss_seg: 0.4358, mix.decode.acc_seg: 66.8307
2023-07-28 18:41:15,312 - mmdet - INFO - Iter [500/40000]	lr: 1.971e-05, eta: 3 days, 3:34:37, time: 6.927, data_time: 0.018, memory: 9355, decode.loss_seg: 0.7003, decode.acc_seg: 75.8894, rpn.loss_rpn_cls: 0.1437, rpn.loss_rpn_bbox: 0.1958, roi.loss_cls: 0.5516, roi.acc: 80.1904, roi.loss_bbox: 0.6519, roi.loss_mask: 0.5304, src.loss_imnet_feat_dist: 0.1377, mix.decode.loss_seg: 0.3614, mix.decode.acc_seg: 68.9029
2023-07-28 18:43:33,037 - mmdet - INFO - Iter [520/40000]	lr: 2.049e-05, eta: 3 days, 3:32:17, time: 6.886, data_time: 0.018, memory: 9355, decode.loss_seg: 0.6672, decode.acc_seg: 78.0342, rpn.loss_rpn_cls: 0.1463, rpn.loss_rpn_bbox: 0.1919, roi.loss_cls: 0.5556, roi.acc: 79.4336, roi.loss_bbox: 0.6503, roi.loss_mask: 0.5265, src.loss_imnet_feat_dist: 0.1343, mix.decode.loss_seg: 0.3867, mix.decode.acc_seg: 69.9780
2023-07-28 18:45:50,833 - mmdet - INFO - Iter [540/40000]	lr: 2.127e-05, eta: 3 days, 3:30:02, time: 6.890, data_time: 0.018, memory: 9355, decode.loss_seg: 0.6580, decode.acc_seg: 76.6880, rpn.loss_rpn_cls: 0.1587, rpn.loss_rpn_bbox: 0.2035, roi.loss_cls: 0.5630, roi.acc: 78.8135, roi.loss_bbox: 0.6470, roi.loss_mask: 0.5287, src.loss_imnet_feat_dist: 0.1336, mix.decode.loss_seg: 0.3879, mix.decode.acc_seg: 68.4257
Traceback (most recent call last):
  File "run_experiments.py", line 127, in <module>
    train_mmdet.main([config_files[i]])
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/tools/train_mmdet.py", line 125, in main
    train_detector(model, datasets, cfg, distributed=distributed, validate=(not cfg.only_train), timestamp=timestamp,  meta=meta,)
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/apis/train.py", line 211, in train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/runner/iter_based_runner.py", line 144, in run
    iter_runner(iter_loaders[i], **kwargs)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/runner/iter_based_runner.py", line 61, in train
    data_batch = next(data_loader)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/runner/iter_based_runner.py", line 34, in __next__
    data = next(self.iter_loader)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 435, in __next__
    data = self._next_data()
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1085, in _next_data
    return self._process_data(data)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1111, in _process_data
    data.reraise()
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/torch/_utils.py", line 428, in reraise
    raise self.exc_type(msg)
FileNotFoundError: Caught FileNotFoundError in DataLoader worker process 1.
Original Traceback (most recent call last):
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/torch/utils/data/_utils/worker.py", line 198, in _worker_loop
    data = fetcher.fetch(index)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 44, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 44, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmseg/datasets/uda_dataset.py", line 127, in __getitem__
    return self.get_rare_class_sample()
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmseg/datasets/uda_dataset.py", line 90, in get_rare_class_sample
    s1 = self.source[i1]
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmseg/datasets/custom.py", line 196, in __getitem__
    return self.prepare_train_img(idx)
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmseg/datasets/custom.py", line 213, in prepare_train_img
    return self.pipeline(results)
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmseg/datasets/pipelines/compose.py", line 42, in __call__
    data = t(data)
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmseg/datasets/pipelines/loading.py", line 62, in __call__
    img_bytes = self.file_client.get(filename)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/fileio/file_client.py", line 1014, in get
    return self.client.get(filepath)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/fileio/file_client.py", line 535, in get
    with open(filepath, 'rb') as f:
FileNotFoundError: [Errno 2] No such file or directory: 'data/synthia/RGB/0002207.png'

