Running on node: biwirender11
In directory: /scratch_net/biwidl202/ppolydorou/project_edaps/edaps
Starting on: Wed Nov 22 01:07:17 CET 2023
Number of CPUs available: 5
SLURM_JOB_ID: 765527
CUDA_VISIBLE_DEVICES: 0
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/utils/setup_env.py:48: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
2023-11-22 01:07:22,971 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.5 (default, Sep  4 2020, 07:30:14) [GCC 7.3.0]
CUDA available: True
GPU 0: NVIDIA GeForce GTX TITAN X
CUDA_HOME: /usr
NVCC: Cuda compilation tools, release 11.2, V11.2.152
GCC: gcc (Debian 8.3.0-6) 8.3.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.8.0
MMCV: 1.6.1
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.25.1+ef53aeb
------------------------------------------------------------

2023-11-22 01:07:24,562 - mmdet - INFO - Distributed training: False
2023-11-22 01:07:26,130 - mmdet - INFO - Config:
checkpoint_config = dict(interval=5000, by_epoch=False, max_keep_ckpts=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
num_instance_classes = 8
norm_cfg = dict(type='BN', requires_grad=True)
find_unused_parameters = True
maskrcnn_losses_weights = 1.0
model = dict(
    type='MaskRCNNPanoptic',
    pretrained='pretrained/mit_b5.pth',
    backbone=dict(type='mit_b5', style='pytorch'),
    use_neck_feat_for_decode_head=False,
    decode_head=dict(
        type='DAFormerHead',
        in_channels=[64, 128, 320, 512],
        in_index=[0, 1, 2, 3],
        channels=256,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        decoder_params=dict(
            embed_dims=256,
            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),
            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),
            fusion_cfg=dict(
                type='aspp',
                sep=True,
                dilations=(1, 6, 12, 18),
                pool=False,
                act_cfg=dict(type='ReLU'),
                norm_cfg=dict(type='BN', requires_grad=True))),
        loss_decode=dict(
            type='CrossEntropyLossMmseg', use_sigmoid=False, loss_weight=1.0)),
    neck=dict(
        type='FPN',
        in_channels=[64, 128, 320, 512],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=8,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=8,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False),
        work_dir=
        'edaps_experiments/exp-00001/work_dirs/local-exp00001/231122_0107_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_be3eb'
    ),
    test_cfg=dict(
        mode='whole',
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CityscapesDataset'
data_root = 'data/cityscapes/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (256, 256)
num_classes = 19
synthia_train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadPanopticAnnotations'),
    dict(type='Resize', img_scale=(1280, 760)),
    dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(
        type='GenPanopLabelsForMaskFormer',
        sigma=8,
        mode='train',
        num_classes=19,
        gen_instance_classids_from_zero=True),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundleMmdet'),
    dict(
        type='Collect',
        keys=[
            'img', 'gt_bboxes', 'gt_labels', 'gt_masks', 'gt_semantic_seg',
            'gt_panoptic_only_thing_classes', 'max_inst_per_class',
            'panoptic_labels_list', 'unique_labels_list', 'indices_list'
        ])
]
cityscapes_train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=(1024, 512)),
    dict(type='RandomCrop', crop_size=(256, 256)),
    dict(type='RandomFlip', prob=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundleMmdet'),
    dict(type='Collect', keys=['img'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=4,
    train=dict(
        type='UDADataset',
        source=dict(
            type='SynthiaDataset',
            data_root='data/synthia/',
            img_dir='RGB',
            depth_dir='',
            ann_dir='panoptic-labels-crowdth-0-for-daformer/synthia_panoptic',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='LoadPanopticAnnotations'),
                dict(type='Resize', img_scale=(1280, 760)),
                dict(
                    type='RandomCrop',
                    crop_size=(256, 256),
                    cat_max_ratio=0.75),
                dict(type='RandomFlip', prob=0.5),
                dict(
                    type='GenPanopLabelsForMaskFormer',
                    sigma=8,
                    mode='train',
                    num_classes=19,
                    gen_instance_classids_from_zero=True),
                dict(
                    type='Normalize',
                    mean=[123.675, 116.28, 103.53],
                    std=[58.395, 57.12, 57.375],
                    to_rgb=True),
                dict(type='DefaultFormatBundleMmdet'),
                dict(
                    type='Collect',
                    keys=[
                        'img', 'gt_bboxes', 'gt_labels', 'gt_masks',
                        'gt_semantic_seg', 'gt_panoptic_only_thing_classes',
                        'max_inst_per_class', 'panoptic_labels_list',
                        'unique_labels_list', 'indices_list'
                    ])
            ]),
        target=dict(
            type='CityscapesDataset',
            data_root='data/cityscapes/',
            img_dir='leftImg8bit/train',
            depth_dir='',
            ann_dir='gtFine_panoptic/cityscapes_panoptic_train_trainId',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='Resize', img_scale=(1024, 512)),
                dict(type='RandomCrop', crop_size=(256, 256)),
                dict(type='RandomFlip', prob=0.5),
                dict(
                    type='Normalize',
                    mean=[123.675, 116.28, 103.53],
                    std=[58.395, 57.12, 57.375],
                    to_rgb=True),
                dict(type='DefaultFormatBundleMmdet'),
                dict(type='Collect', keys=['img'])
            ]),
        rare_class_sampling=dict(
            min_pixels=3000, class_temp=0.01, min_crop_ratio=0.5)),
    val=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes',
        img_dir='leftImg8bit/val',
        depth_dir='',
        ann_dir='gtFine_panoptic/cityscapes_panoptic_val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/val',
        depth_dir='',
        ann_dir='gtFine_panoptic/cityscapes_panoptic_val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
uda = dict(
    type='DACS',
    alpha=0.999,
    pseudo_threshold=0.968,
    pseudo_weight_ignore_top=15,
    pseudo_weight_ignore_bottom=120,
    imnet_feature_dist_lambda=0.005,
    imnet_feature_dist_classes=[6, 7, 11, 12, 13, 14, 15, 16, 17, 18],
    imnet_feature_dist_scale_min_ratio=0.75,
    mix='class',
    blur=True,
    color_jitter_strength=0.2,
    color_jitter_probability=0.2,
    debug_img_interval=5000,
    print_grad_magnitude=False,
    share_src_backward=True,
    disable_mix_masks=False)
use_ddp_wrapper = True
optimizer = dict(
    type='AdamW',
    lr=6e-05,
    betas=(0.9, 0.999),
    weight_decay=0.01,
    paramwise_cfg=dict(
        custom_keys=dict(
            neck=dict(lr_mult=10.0),
            head=dict(lr_mult=10.0),
            pos_block=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0))))
optimizer_config = None
lr_config = dict(
    policy='poly',
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06,
    power=1.0,
    min_lr=0.0,
    by_epoch=False)
debug = False
n_gpus = 1
gpu_mtotal = 23000
total_train_time = '24:00:00'
n_cpus = 16
mem_per_cpu = 16000
machine = 'local'
only_eval = False
only_train = False
activate_auto_scale_lr = False
auto_scale_lr = dict(enable=False, base_batch_size=16)
print_layer_wise_lr = False
file_sys = 'Slurm'
launcher = None
generate_only_visuals_without_eval = False
dump_predictions_to_disk = False
evaluate_from_saved_png_predictions = False
panop_eval_temp_folder_previous = None
exp_sub = 'exp-00001'
exp_root = 'edaps_experiments'
seed = 0
evaluation = dict(
    interval=20000,
    metric=['mIoU'],
    eval_type='maskrcnn_panoptic',
    dataset_name='cityscapes',
    gt_dir='data/cityscapes/gtFine/val',
    gt_dir_panop='data/cityscapes/gtFine_panoptic',
    num_samples_debug=12,
    post_proccess_params=dict(
        num_classes=19,
        ignore_label=255,
        mapillary_dataloading_style='OURS',
        label_divisor=1000,
        train_id_to_eval_id=[
            7, 8, 11, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31,
            32, 33, 0
        ],
        thing_list=[11, 12, 13, 14, 15, 16, 17, 18],
        mask_score_threshold=0.95,
        debug=False,
        dump_semantic_pred_as_numpy_array=False,
        load_semantic_pred_as_numpy_array=False,
        semantic_pred_numpy_array_location=None,
        use_semantic_decoder_for_instance_labeling=False,
        use_semantic_decoder_for_panoptic_labeling=False,
        nms_th=None,
        intersec_th=None,
        upsnet_mask_pruning=False,
        generate_thing_cls_panoptic_from_instance_pred=False),
    visuals_pan_eval=False,
    evalScale=None,
    evaluate_from_saved_numpy_predictions=False,
    evaluate_from_saved_png_predictions=False,
    panop_eval_folder=
    'edaps_experiments/exp-00001/work_dirs/local-exp00001/231122_0107_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_be3eb/panoptic_eval',
    panop_eval_temp_folder=
    'edaps_experiments/exp-00001/work_dirs/local-exp00001/231122_0107_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_be3eb/panoptic_eval/panop_eval_22-11-2023_01-07-22-875864',
    debug=False,
    out_dir=
    'edaps_experiments/exp-00001/work_dirs/local-exp00001/231122_0107_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_be3eb/panoptic_eval/panop_eval_22-11-2023_01-07-22-875864/visuals'
)
runner = dict(type='IterBasedRunner', max_iters=20000)
name = '231122_0107_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_be3eb'
exp = 1
name_dataset = 'synthia2cityscapes'
name_architecture = 'maskrcnn_mitb5'
name_encoder = 'mitb5'
name_decoder = 'maskrcnn'
name_uda = 'dacs_rcs0.01_cpl'
name_opt = 'adamw_6e-05_pmTrue_poly10warm_1x1_20k'
work_dir = 'edaps_experiments/exp-00001/work_dirs/local-exp00001/231122_0107_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_be3eb'
git_rev = 'ef53aebcba7f5c80ce917f39a0715d6ac5260c7c'
auto_resume = False
gpu_ids = [0]

2023-11-22 01:07:26,131 - mmdet - INFO - Set random seed to 0, deterministic: False
2023-11-22 01:07:26,131 - mmdet - INFO - DEBUG - PETROS 14-08-2023 - BEFORE MODEL BUILD
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/detectors/two_stage.py:29: UserWarning: DeprecationWarning: pretrained is deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is deprecated, '
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/backbones/mix_transformer.py:215: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead')
2023-11-22 01:07:29,901 - mmdet - INFO - Load mit checkpoint.
2023-11-22 01:07:29,903 - mmdet - INFO - load checkpoint from local path: pretrained/mit_b5.pth
2023-11-22 01:07:30,336 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-11-22 01:07:30,358 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-11-22 01:07:30,366 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-11-22 01:07:30,492 - mmdet - INFO - initialize DAFormerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-11-22 01:07:30,560 - mmdet - INFO - Load mit checkpoint.
2023-11-22 01:07:30,561 - mmdet - INFO - load checkpoint from local path: pretrained/mit_b5.pth
2023-11-22 01:07:30,918 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-11-22 01:07:30,938 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-11-22 01:07:30,946 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-11-22 01:07:31,071 - mmdet - INFO - initialize DAFormerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-11-22 01:07:31,138 - mmdet - INFO - Load mit checkpoint.
2023-11-22 01:07:31,139 - mmdet - INFO - load checkpoint from local path: pretrained/mit_b5.pth
2023-11-22 01:07:31,609 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-11-22 01:07:31,632 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-11-22 01:07:31,640 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-11-22 01:07:31,768 - mmdet - INFO - initialize DAFormerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-11-22 01:07:31,874 - mmdet - INFO - DEBUG - PETROS 14-08-2023 - MODEL IS READY
2023-11-22 01:07:31,875 - mmseg - INFO - Loaded annotations from : data/synthia/panoptic-labels-crowdth-0-for-daformer/synthia_panoptic.json
2023-11-22 01:07:37,311 - mmseg - INFO - Loaded 9400 images from data/synthia/RGB
2023-11-22 01:07:37,316 - mmseg - INFO - Loaded annotations from : data/cityscapes/gtFine_panoptic/cityscapes_panoptic_train_trainId.json
2023-11-22 01:07:37,512 - mmseg - INFO - Loaded 2975 images from data/cityscapes/leftImg8bit/train
2023-11-22 01:07:37,579 - mmseg - INFO - RCS Classes: [6, 7, 17, 18, 4, 3, 12, 5, 15, 13, 11, 10, 8, 0, 1, 2]
2023-11-22 01:07:37,580 - mmseg - INFO - RCS ClassProb: [1.55649453e-01 1.45927146e-01 1.30805254e-01 1.29144296e-01
 1.22819245e-01 1.22646019e-01 9.97279957e-02 5.53424992e-02
 3.33626680e-02 2.43163528e-03 2.00466975e-03 1.35448776e-04
 3.78220921e-06 8.31826052e-10 3.41141226e-10 1.11511794e-14]
2023-11-22 01:07:39,663 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-11-22 01:07:49,839 - mmseg - INFO - Loaded annotations from : data/cityscapes/gtFine_panoptic/cityscapes_panoptic_val.json
2023-11-22 01:07:49,851 - mmseg - INFO - Loaded 150 images from data/cityscapes/leftImg8bit/val
2023-11-22 01:07:49,852 - mmdet - INFO - Start running, host: ppolydorou@biwirender11, work_dir: /scratch_net/biwidl202/ppolydorou/project_edaps/edaps/edaps_experiments/exp-00001/work_dirs/local-exp00001/231122_0107_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_be3eb
2023-11-22 01:07:49,852 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHookUDA                        
 -------------------- 
after_train_iter:
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-11-22 01:07:49,852 - mmdet - INFO - workflow: [('train', 1)], max: 20000 iters
2023-11-22 01:07:49,853 - mmdet - INFO - Checkpoints will be saved to /scratch_net/biwidl202/ppolydorou/project_edaps/edaps/edaps_experiments/exp-00001/work_dirs/local-exp00001/231122_0107_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_be3eb by HardDiskBackend.
2023-11-22 01:07:49,853 - mmdet - INFO - The best checkpoint will be saved to edaps_experiments/exp-00001/work_dirs/local-exp00001/231122_0107_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_be3eb/panoptic_eval/panop_eval_22-11-2023_01-07-22-875864/visuals/231122_0107_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_be3eb by HardDiskBackend
_base_/default_runtime_mmdet_mr.py
_base_/models/maskrcnn_sepaspp_mitb5.py
_base_/datasets/uda_synthia_to_cityscapes_maskrcnn_panoptic.py
_base_/uda/dacs_a999_fdthings.py
_base_/schedules/adamw.py
_base_/schedules/poly10warm.py
Run job 231122_0107_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_be3eb
DEBUG - PETROS 20-08-2023 - data root is : data/synthia/
DEBUG - PETROS 19-08-2023 - MMSEG/CUSTOMDATASET - LOAD ANNOTATIONS PANOPTIC - DATASET TYPE:<class 'dict'>
DEBUG - PETROS 20-08-2023 - data root is : data/cityscapes/
DEBUG - PETROS 19-08-2023 - MMSEG/CUSTOMDATASET - LOAD ANNOTATIONS PANOPTIC - DATASET TYPE:<class 'dict'>
DEBUG - PETROS 20-08-2023 - data root is : data/cityscapes
DEBUG - PETROS 19-08-2023 - MMSEG/CUSTOMDATASET - LOAD ANNOTATIONS PANOPTIC - DATASET TYPE:<class 'dict'>
DEBUG_PETROS 31/10/2023 - MMDET/APIS/TRAIN.PY - Number of gpus for training is: 1
DEBUG_PETROS 31/10/2023 - MMDET/APIS/TRAIN.PY - Samples per gpu is: 1
DEBUG_PETROS 31/10/2023 - MMDET/APIS/TRAIN.PY - Workers per gpu is: 4
DEBUG_PETROS 31/10/2023 - MMDET/APIS/TRAIN.PY - Batch_size: 1
2023-11-22 01:12:49,556 - mmdet - INFO - Iter [50/20000]	lr: 1.955e-06, eta: 1 day, 8:58:45, time: 5.951, data_time: 0.034, memory: 3517, decode.loss_seg: 2.7762, decode.acc_seg: 7.7926, contrastive_loss: 1.4633, rpn.loss_rpn_cls: 0.6749, rpn.loss_rpn_bbox: 0.1309, roi.loss_cls: 1.5622, roi.acc: 57.4884, roi.loss_bbox: 0.1154, roi.loss_mask: 1.9615, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.3180, mix.decode.acc_seg: 14.0285
2023-11-22 01:17:38,256 - mmdet - INFO - Iter [100/20000]	lr: 3.940e-06, eta: 1 day, 8:24:25, time: 5.774, data_time: 0.014, memory: 3517, decode.loss_seg: 2.7118, decode.acc_seg: 22.0709, contrastive_loss: 1.4660, rpn.loss_rpn_cls: 0.6217, rpn.loss_rpn_bbox: 0.1225, roi.loss_cls: 0.4541, roi.acc: 93.6719, roi.loss_bbox: 0.1493, roi.loss_mask: 1.2072, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.5711, mix.decode.acc_seg: 20.6213
2023-11-22 01:22:12,151 - mmdet - INFO - Iter [150/20000]	lr: 5.916e-06, eta: 1 day, 7:37:06, time: 5.478, data_time: 0.014, memory: 3517, decode.loss_seg: 2.4853, decode.acc_seg: 31.7383, contrastive_loss: 1.2768, rpn.loss_rpn_cls: 0.4902, rpn.loss_rpn_bbox: 0.0927, roi.loss_cls: 0.3087, roi.acc: 94.1758, roi.loss_bbox: 0.1565, roi.loss_mask: 0.9229, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.1923, mix.decode.acc_seg: 35.4974
2023-11-22 01:27:18,064 - mmdet - INFO - Iter [200/20000]	lr: 7.881e-06, eta: 1 day, 8:04:00, time: 6.118, data_time: 0.015, memory: 3709, decode.loss_seg: 2.3571, decode.acc_seg: 37.7717, contrastive_loss: 1.2886, rpn.loss_rpn_cls: 0.4260, rpn.loss_rpn_bbox: 0.1360, roi.loss_cls: 0.3750, roi.acc: 90.8047, roi.loss_bbox: 0.2265, roi.loss_mask: 0.7787, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.0707, mix.decode.acc_seg: 42.2693
2023-11-22 01:32:19,300 - mmdet - INFO - Iter [250/20000]	lr: 9.836e-06, eta: 1 day, 8:11:56, time: 6.025, data_time: 0.014, memory: 3709, decode.loss_seg: 2.0586, decode.acc_seg: 48.1395, contrastive_loss: 1.2668, rpn.loss_rpn_cls: 0.3429, rpn.loss_rpn_bbox: 0.1353, roi.loss_cls: 0.4217, roi.acc: 88.8555, roi.loss_bbox: 0.2834, roi.loss_mask: 0.7138, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.0592, mix.decode.acc_seg: 46.8936
2023-11-22 01:37:18,961 - mmdet - INFO - Iter [300/20000]	lr: 1.178e-05, eta: 1 day, 8:13:50, time: 5.993, data_time: 0.014, memory: 3709, decode.loss_seg: 1.7942, decode.acc_seg: 49.3918, contrastive_loss: 1.3100, rpn.loss_rpn_cls: 0.2430, rpn.loss_rpn_bbox: 0.1180, roi.loss_cls: 0.4628, roi.acc: 87.8125, roi.loss_bbox: 0.4030, roi.loss_mask: 0.6697, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.0051, mix.decode.acc_seg: 47.7240
2023-11-22 01:42:11,466 - mmdet - INFO - Iter [350/20000]	lr: 1.372e-05, eta: 1 day, 8:07:04, time: 5.850, data_time: 0.014, memory: 3709, decode.loss_seg: 1.7126, decode.acc_seg: 50.4445, contrastive_loss: 1.2483, rpn.loss_rpn_cls: 0.2114, rpn.loss_rpn_bbox: 0.0995, roi.loss_cls: 0.4965, roi.acc: 86.9141, roi.loss_bbox: 0.4054, roi.loss_mask: 0.6365, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.9771, mix.decode.acc_seg: 52.1306
2023-11-22 01:47:00,164 - mmdet - INFO - Iter [400/20000]	lr: 1.564e-05, eta: 1 day, 7:57:39, time: 5.774, data_time: 0.013, memory: 3709, decode.loss_seg: 1.5827, decode.acc_seg: 49.9813, contrastive_loss: 1.1224, rpn.loss_rpn_cls: 0.2043, rpn.loss_rpn_bbox: 0.0874, roi.loss_cls: 0.4582, roi.acc: 88.4375, roi.loss_bbox: 0.3518, roi.loss_mask: 0.6399, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.9004, mix.decode.acc_seg: 50.7754
2023-11-22 01:52:22,065 - mmdet - INFO - Iter [450/20000]	lr: 1.756e-05, eta: 1 day, 8:13:19, time: 6.438, data_time: 0.014, memory: 3799, decode.loss_seg: 1.4195, decode.acc_seg: 55.6422, contrastive_loss: 1.3584, rpn.loss_rpn_cls: 0.1791, rpn.loss_rpn_bbox: 0.1177, roi.loss_cls: 0.4977, roi.acc: 85.2852, roi.loss_bbox: 0.4696, roi.loss_mask: 0.6249, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.7876, mix.decode.acc_seg: 57.4757
2023-11-22 01:57:21,169 - mmdet - INFO - Iter [500/20000]	lr: 1.946e-05, eta: 1 day, 8:09:57, time: 5.982, data_time: 0.014, memory: 3799, decode.loss_seg: 1.3341, decode.acc_seg: 58.2132, contrastive_loss: 1.2663, rpn.loss_rpn_cls: 0.1699, rpn.loss_rpn_bbox: 0.1053, roi.loss_cls: 0.4913, roi.acc: 85.5078, roi.loss_bbox: 0.4951, roi.loss_mask: 0.5986, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.6790, mix.decode.acc_seg: 55.3163
2023-11-22 02:02:19,480 - mmdet - INFO - Iter [550/20000]	lr: 2.136e-05, eta: 1 day, 8:05:49, time: 5.966, data_time: 0.014, memory: 3799, decode.loss_seg: 1.3377, decode.acc_seg: 58.8376, contrastive_loss: 1.2595, rpn.loss_rpn_cls: 0.1615, rpn.loss_rpn_bbox: 0.0985, roi.loss_cls: 0.4631, roi.acc: 86.0273, roi.loss_bbox: 0.4619, roi.loss_mask: 0.5805, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.7185, mix.decode.acc_seg: 55.0319
2023-11-22 02:07:15,799 - mmdet - INFO - Iter [600/20000]	lr: 2.324e-05, eta: 1 day, 8:00:29, time: 5.926, data_time: 0.014, memory: 3799, decode.loss_seg: 1.2409, decode.acc_seg: 59.5643, contrastive_loss: 1.2378, rpn.loss_rpn_cls: 0.1547, rpn.loss_rpn_bbox: 0.1050, roi.loss_cls: 0.4784, roi.acc: 84.7656, roi.loss_bbox: 0.5190, roi.loss_mask: 0.5755, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.6295, mix.decode.acc_seg: 55.5990
2023-11-22 02:12:09,209 - mmdet - INFO - Iter [650/20000]	lr: 2.512e-05, eta: 1 day, 7:53:46, time: 5.868, data_time: 0.014, memory: 3799, decode.loss_seg: 1.2951, decode.acc_seg: 60.9796, contrastive_loss: 1.4456, rpn.loss_rpn_cls: 0.1960, rpn.loss_rpn_bbox: 0.1093, roi.loss_cls: 0.4834, roi.acc: 84.3789, roi.loss_bbox: 0.5251, roi.loss_mask: 0.5585, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.7333, mix.decode.acc_seg: 52.9373
2023-11-22 02:17:06,366 - mmdet - INFO - Iter [700/20000]	lr: 2.698e-05, eta: 1 day, 7:49:01, time: 5.943, data_time: 0.014, memory: 3799, decode.loss_seg: 1.1148, decode.acc_seg: 64.2856, contrastive_loss: 1.3663, rpn.loss_rpn_cls: 0.1640, rpn.loss_rpn_bbox: 0.0856, roi.loss_cls: 0.4446, roi.acc: 85.7383, roi.loss_bbox: 0.4699, roi.loss_mask: 0.5373, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.6578, mix.decode.acc_seg: 59.3107
2023-11-22 02:21:56,577 - mmdet - INFO - Iter [750/20000]	lr: 2.884e-05, eta: 1 day, 7:41:17, time: 5.804, data_time: 0.013, memory: 3799, decode.loss_seg: 1.0893, decode.acc_seg: 65.8144, contrastive_loss: 1.3086, rpn.loss_rpn_cls: 0.1572, rpn.loss_rpn_bbox: 0.1074, roi.loss_cls: 0.4680, roi.acc: 85.0977, roi.loss_bbox: 0.5167, roi.loss_mask: 0.5882, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.6532, mix.decode.acc_seg: 57.3439
2023-11-22 02:27:06,229 - mmdet - INFO - Iter [800/20000]	lr: 3.068e-05, eta: 1 day, 7:41:41, time: 6.193, data_time: 0.014, memory: 3799, decode.loss_seg: 1.0315, decode.acc_seg: 67.5998, contrastive_loss: 1.2976, rpn.loss_rpn_cls: 0.1889, rpn.loss_rpn_bbox: 0.1299, roi.loss_cls: 0.5347, roi.acc: 82.8398, roi.loss_bbox: 0.5994, roi.loss_mask: 0.5519, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.5822, mix.decode.acc_seg: 60.4861
2023-11-22 02:32:22,997 - mmdet - INFO - Iter [850/20000]	lr: 3.252e-05, eta: 1 day, 7:44:06, time: 6.335, data_time: 0.014, memory: 3799, decode.loss_seg: 1.0048, decode.acc_seg: 68.2898, contrastive_loss: 1.2236, rpn.loss_rpn_cls: 0.1736, rpn.loss_rpn_bbox: 0.1019, roi.loss_cls: 0.4773, roi.acc: 84.1289, roi.loss_bbox: 0.5086, roi.loss_mask: 0.5468, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.5398, mix.decode.acc_seg: 63.7733
2023-11-22 02:37:20,000 - mmdet - INFO - Iter [900/20000]	lr: 3.434e-05, eta: 1 day, 7:38:40, time: 5.940, data_time: 0.014, memory: 3799, decode.loss_seg: 0.9866, decode.acc_seg: 69.3346, contrastive_loss: 1.4089, rpn.loss_rpn_cls: 0.1617, rpn.loss_rpn_bbox: 0.0971, roi.loss_cls: 0.4456, roi.acc: 85.8320, roi.loss_bbox: 0.4927, roi.loss_mask: 0.5285, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.5054, mix.decode.acc_seg: 61.8917
2023-11-22 02:42:21,907 - mmdet - INFO - Iter [950/20000]	lr: 3.616e-05, eta: 1 day, 7:34:56, time: 6.038, data_time: 0.014, memory: 3805, decode.loss_seg: 1.0522, decode.acc_seg: 66.4473, contrastive_loss: 1.1871, rpn.loss_rpn_cls: 0.1501, rpn.loss_rpn_bbox: 0.0977, roi.loss_cls: 0.4750, roi.acc: 84.6016, roi.loss_bbox: 0.4775, roi.loss_mask: 0.5282, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.5994, mix.decode.acc_seg: 61.0893
2023-11-22 02:47:01,357 - mmdet - INFO - Exp name: 231122_0107_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_be3eb
2023-11-22 02:47:01,358 - mmdet - INFO - Iter [1000/20000]	lr: 3.796e-05, eta: 1 day, 7:23:57, time: 5.589, data_time: 0.014, memory: 3805, decode.loss_seg: 0.9443, decode.acc_seg: 70.1471, contrastive_loss: 1.1251, rpn.loss_rpn_cls: 0.1449, rpn.loss_rpn_bbox: 0.0880, roi.loss_cls: 0.4178, roi.acc: 86.6094, roi.loss_bbox: 0.4415, roi.loss_mask: 0.6039, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.6190, mix.decode.acc_seg: 57.9053
2023-11-22 02:52:11,009 - mmdet - INFO - Iter [1050/20000]	lr: 3.976e-05, eta: 1 day, 7:22:40, time: 6.193, data_time: 0.014, memory: 3805, decode.loss_seg: 0.8021, decode.acc_seg: 73.5882, contrastive_loss: 1.2413, rpn.loss_rpn_cls: 0.1372, rpn.loss_rpn_bbox: 0.0928, roi.loss_cls: 0.4293, roi.acc: 86.0469, roi.loss_bbox: 0.4585, roi.loss_mask: 0.5360, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.5223, mix.decode.acc_seg: 62.7021
2023-11-22 02:57:07,447 - mmdet - INFO - Iter [1100/20000]	lr: 4.154e-05, eta: 1 day, 7:17:14, time: 5.929, data_time: 0.014, memory: 3805, decode.loss_seg: 0.8238, decode.acc_seg: 72.6787, contrastive_loss: 1.2335, rpn.loss_rpn_cls: 0.1387, rpn.loss_rpn_bbox: 0.1066, roi.loss_cls: 0.4493, roi.acc: 84.8125, roi.loss_bbox: 0.5171, roi.loss_mask: 0.5246, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.4703, mix.decode.acc_seg: 61.6481
2023-11-22 03:02:00,276 - mmdet - INFO - Iter [1150/20000]	lr: 4.332e-05, eta: 1 day, 7:10:52, time: 5.857, data_time: 0.014, memory: 3805, decode.loss_seg: 0.8781, decode.acc_seg: 72.1772, contrastive_loss: 1.3090, rpn.loss_rpn_cls: 0.1193, rpn.loss_rpn_bbox: 0.0864, roi.loss_cls: 0.4187, roi.acc: 86.3516, roi.loss_bbox: 0.4835, roi.loss_mask: 0.5149, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.4932, mix.decode.acc_seg: 59.3756
2023-11-22 03:07:11,972 - mmdet - INFO - Iter [1200/20000]	lr: 4.508e-05, eta: 1 day, 7:09:32, time: 6.234, data_time: 0.014, memory: 3805, decode.loss_seg: 0.7851, decode.acc_seg: 75.0398, contrastive_loss: 1.4066, rpn.loss_rpn_cls: 0.1294, rpn.loss_rpn_bbox: 0.0893, roi.loss_cls: 0.4130, roi.acc: 85.9688, roi.loss_bbox: 0.4702, roi.loss_mask: 0.5296, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.4154, mix.decode.acc_seg: 64.3107
2023-11-22 03:12:05,383 - mmdet - INFO - Iter [1250/20000]	lr: 4.684e-05, eta: 1 day, 7:03:20, time: 5.868, data_time: 0.014, memory: 3805, decode.loss_seg: 0.8659, decode.acc_seg: 71.3358, contrastive_loss: 1.2733, rpn.loss_rpn_cls: 0.1362, rpn.loss_rpn_bbox: 0.1058, roi.loss_cls: 0.4428, roi.acc: 85.8008, roi.loss_bbox: 0.5125, roi.loss_mask: 0.5184, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.4504, mix.decode.acc_seg: 62.4205
2023-11-22 03:16:52,322 - mmdet - INFO - Iter [1300/20000]	lr: 4.859e-05, eta: 1 day, 6:55:41, time: 5.739, data_time: 0.014, memory: 3805, decode.loss_seg: 0.7281, decode.acc_seg: 73.9309, contrastive_loss: 1.2140, rpn.loss_rpn_cls: 0.1956, rpn.loss_rpn_bbox: 0.0979, roi.loss_cls: 0.3822, roi.acc: 87.6836, roi.loss_bbox: 0.4309, roi.loss_mask: 0.5297, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.4438, mix.decode.acc_seg: 58.6654
2023-11-22 03:21:28,877 - mmdet - INFO - Iter [1350/20000]	lr: 5.032e-05, eta: 1 day, 6:45:51, time: 5.531, data_time: 0.013, memory: 3805, decode.loss_seg: 0.8388, decode.acc_seg: 72.3444, contrastive_loss: 1.2498, rpn.loss_rpn_cls: 0.1251, rpn.loss_rpn_bbox: 0.0840, roi.loss_cls: 0.3613, roi.acc: 88.5352, roi.loss_bbox: 0.4086, roi.loss_mask: 0.5001, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.6119, mix.decode.acc_seg: 59.3631
2023-11-22 03:26:26,840 - mmdet - INFO - Iter [1400/20000]	lr: 5.205e-05, eta: 1 day, 6:41:08, time: 5.959, data_time: 0.014, memory: 3805, decode.loss_seg: 0.6831, decode.acc_seg: 76.4558, contrastive_loss: 1.2688, rpn.loss_rpn_cls: 0.1485, rpn.loss_rpn_bbox: 0.1095, roi.loss_cls: 0.4302, roi.acc: 85.6719, roi.loss_bbox: 0.4986, roi.loss_mask: 0.5070, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.3838, mix.decode.acc_seg: 64.3986
2023-11-22 03:31:26,476 - mmdet - INFO - Iter [1450/20000]	lr: 5.376e-05, eta: 1 day, 6:36:45, time: 5.993, data_time: 0.014, memory: 3805, decode.loss_seg: 0.7415, decode.acc_seg: 76.4268, contrastive_loss: 1.1300, rpn.loss_rpn_cls: 0.1771, rpn.loss_rpn_bbox: 0.1316, roi.loss_cls: 0.4256, roi.acc: 85.9375, roi.loss_bbox: 0.4878, roi.loss_mask: 0.4929, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.4329, mix.decode.acc_seg: 61.4557
2023-11-22 03:36:31,023 - mmdet - INFO - Iter [1500/20000]	lr: 5.547e-05, eta: 1 day, 6:33:21, time: 6.091, data_time: 0.014, memory: 3805, decode.loss_seg: 0.6714, decode.acc_seg: 75.0464, contrastive_loss: 1.2315, rpn.loss_rpn_cls: 0.1530, rpn.loss_rpn_bbox: 0.1241, roi.loss_cls: 0.4383, roi.acc: 85.2539, roi.loss_bbox: 0.5013, roi.loss_mask: 0.4692, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.3902, mix.decode.acc_seg: 63.5104
2023-11-22 03:41:26,632 - mmdet - INFO - Iter [1550/20000]	lr: 5.535e-05, eta: 1 day, 6:28:03, time: 5.912, data_time: 0.013, memory: 3805, decode.loss_seg: 0.6892, decode.acc_seg: 74.0536, contrastive_loss: 1.2251, rpn.loss_rpn_cls: 0.1621, rpn.loss_rpn_bbox: 0.1122, roi.loss_cls: 0.4347, roi.acc: 86.0898, roi.loss_bbox: 0.5071, roi.loss_mask: 0.4855, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.4380, mix.decode.acc_seg: 60.5348
2023-11-22 03:46:26,544 - mmdet - INFO - Iter [1600/20000]	lr: 5.520e-05, eta: 1 day, 6:23:37, time: 5.998, data_time: 0.014, memory: 3805, decode.loss_seg: 0.5879, decode.acc_seg: 74.7780, contrastive_loss: 1.2631, rpn.loss_rpn_cls: 0.1273, rpn.loss_rpn_bbox: 0.0975, roi.loss_cls: 0.4287, roi.acc: 86.3594, roi.loss_bbox: 0.4979, roi.loss_mask: 0.5093, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.3686, mix.decode.acc_seg: 64.7415
2023-11-22 03:51:12,111 - mmdet - INFO - Iter [1650/20000]	lr: 5.505e-05, eta: 1 day, 6:16:29, time: 5.711, data_time: 0.013, memory: 3805, decode.loss_seg: 0.7190, decode.acc_seg: 74.8797, contrastive_loss: 1.0423, rpn.loss_rpn_cls: 0.1531, rpn.loss_rpn_bbox: 0.1060, roi.loss_cls: 0.4059, roi.acc: 86.6367, roi.loss_bbox: 0.4572, roi.loss_mask: 0.5026, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.5382, mix.decode.acc_seg: 60.2975
2023-11-22 03:56:09,765 - mmdet - INFO - Iter [1700/20000]	lr: 5.490e-05, eta: 1 day, 6:11:39, time: 5.953, data_time: 0.013, memory: 3805, decode.loss_seg: 0.6599, decode.acc_seg: 77.4409, contrastive_loss: 1.1872, rpn.loss_rpn_cls: 0.1262, rpn.loss_rpn_bbox: 0.1007, roi.loss_cls: 0.4249, roi.acc: 85.7266, roi.loss_bbox: 0.5033, roi.loss_mask: 0.4903, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.4056, mix.decode.acc_seg: 62.7143
2023-11-22 04:01:07,746 - mmdet - INFO - Iter [1750/20000]	lr: 5.475e-05, eta: 1 day, 6:06:52, time: 5.960, data_time: 0.013, memory: 3805, decode.loss_seg: 0.6963, decode.acc_seg: 75.6112, contrastive_loss: 1.2127, rpn.loss_rpn_cls: 0.1384, rpn.loss_rpn_bbox: 0.1132, roi.loss_cls: 0.4060, roi.acc: 86.3164, roi.loss_bbox: 0.4753, roi.loss_mask: 0.4813, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.4254, mix.decode.acc_seg: 63.2997
[W python_anomaly_mode.cpp:104] Warning: Error detected in NormBackward1. Traceback of forward call that caused the error:
  File "run_experiments.py", line 146, in <module>
    train_mmdet.main([config_files[i]])
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/tools/train_mmdet.py", line 127, in main
    train_detector(model, datasets, cfg, distributed=distributed, validate=(not cfg.only_train), timestamp=timestamp,  meta=meta,)
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/apis/train.py", line 214, in train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/runner/iter_based_runner.py", line 176, in run
    iter_runner(iter_loaders[i], **kwargs)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/runner/iter_based_runner.py", line 65, in train
    outputs = self.model.train_step(data_batch, self.optimizer, **kwargs)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/parallel/data_parallel.py", line 77, in train_step
    return self.module.train_step(*inputs[0], **kwargs[0])
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/uda/dacs.py", line 147, in train_step
    log_vars = self(**data_batch) # self(**data_batch) is a Python syntax that involves using the double asterisks (**) to unpack a dictionary and pass its key-value pairs as keyword arguments to a function or method.
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py", line 116, in new_func
    return old_func(*args, **kwargs)
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/detectors/base.py", line 172, in forward
    return self.forward_train(img, img_metas, **kwargs)
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/uda/dacs.py", line 217, in forward_train
    feat_loss, feat_log = self.calc_feat_dist(img, gt_semantic_seg, src_feat)
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/uda/dacs.py", line 135, in calc_feat_dist
    feat_dist = self.masked_feat_dist(feat[lay], feat_imnet[lay], fdist_mask)
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/uda/dacs.py", line 115, in masked_feat_dist
    pw_feat_dist = torch.norm(feat_diff, dim=1, p=2)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/torch/functional.py", line 1337, in norm
    return _VF.norm(input, p, _dim, keepdim=keepdim)  # type: ignore
 (function _print_stack)
Traceback (most recent call last):
  File "run_experiments.py", line 146, in <module>
    train_mmdet.main([config_files[i]])
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/tools/train_mmdet.py", line 127, in main
    train_detector(model, datasets, cfg, distributed=distributed, validate=(not cfg.only_train), timestamp=timestamp,  meta=meta,)
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/apis/train.py", line 214, in train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/runner/iter_based_runner.py", line 176, in run
    iter_runner(iter_loaders[i], **kwargs)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/runner/iter_based_runner.py", line 65, in train
    outputs = self.model.train_step(data_batch, self.optimizer, **kwargs)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/parallel/data_parallel.py", line 77, in train_step
    return self.module.train_step(*inputs[0], **kwargs[0])
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/uda/dacs.py", line 147, in train_step
    log_vars = self(**data_batch) # self(**data_batch) is a Python syntax that involves using the double asterisks (**) to unpack a dictionary and pass its key-value pairs as keyword arguments to a function or method.
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py", line 116, in new_func
    return old_func(*args, **kwargs)
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/detectors/base.py", line 172, in forward
    return self.forward_train(img, img_metas, **kwargs)
  File "/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/uda/dacs.py", line 232, in forward_train
    clean_loss.backward()
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/torch/tensor.py", line 221, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph)
  File "/scratch_net/biwidl202/ppolydorou/conda_envs/edaps/lib/python3.8/site-packages/torch/autograd/__init__.py", line 130, in backward
    Variable._execution_engine.run_backward(
RuntimeError: Function 'NormBackward1' returned nan values in its 0th output.
/scratch/slurm/spool/job765527/slurm_script: line 43: kill: (5002) - No such process
/scratch/slurm/spool/job765527/slurm_script: line 44: kill: (5002) - No such process
