Running on node: biwirender10
In directory:    /scratch_net/biwidl202/ppolydorou/project_edaps/edaps
Starting on:     Wed Nov  1 16:10:17 CET 2023
SLURM_JOB_ID:    756381
CUDA_VISIBLE_DEVICES: 0,1
Wed Nov  1 16:10:17 2023       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 470.141.03   Driver Version: 470.141.03   CUDA Version: 11.4     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  NVIDIA GeForce ...  On   | 00000000:05:00.0 Off |                  N/A |
| 22%   32C    P8    15W / 250W |      1MiB / 12212MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   1  NVIDIA GeForce ...  On   | 00000000:08:00.0 Off |                  N/A |
| 22%   40C    P8    17W / 250W |      1MiB / 12212MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/utils/setup_env.py:38: UserWarning: Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/utils/setup_env.py:48: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
2023-11-01 16:10:24,076 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.5 (default, Sep  4 2020, 07:30:14) [GCC 7.3.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce GTX TITAN X
CUDA_HOME: /usr
NVCC: Cuda compilation tools, release 11.2, V11.2.152
GCC: gcc (Debian 8.3.0-6) 8.3.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.8.0
MMCV: 1.6.1
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.25.1+d4240ed
------------------------------------------------------------

2023-11-01 16:10:25,785 - mmdet - INFO - Distributed training: False
2023-11-01 16:10:27,532 - mmdet - INFO - Config:
checkpoint_config = dict(interval=40000, by_epoch=False, max_keep_ckpts=1)
log_config = dict(interval=20, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
num_instance_classes = 8
norm_cfg = dict(type='BN', requires_grad=True)
find_unused_parameters = True
maskrcnn_losses_weights = 1.0
model = dict(
    type='MaskRCNNPanoptic',
    pretrained='pretrained/mit_b5.pth',
    backbone=dict(type='mit_b5', style='pytorch'),
    use_neck_feat_for_decode_head=False,
    decode_head=dict(
        type='DAFormerHead',
        in_channels=[64, 128, 320, 512],
        in_index=[0, 1, 2, 3],
        channels=256,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        decoder_params=dict(
            embed_dims=256,
            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),
            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),
            fusion_cfg=dict(
                type='aspp',
                sep=True,
                dilations=(1, 6, 12, 18),
                pool=False,
                act_cfg=dict(type='ReLU'),
                norm_cfg=dict(type='BN', requires_grad=True))),
        loss_decode=dict(
            type='CrossEntropyLossMmseg', use_sigmoid=False, loss_weight=1.0)),
    neck=dict(
        type='FPN',
        in_channels=[64, 128, 320, 512],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=8,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=8,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False),
        work_dir=
        'edaps_experiments/exp-00001/work_dirs/local-exp00001/231101_1610_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_98271'
    ),
    test_cfg=dict(
        mode='whole',
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CityscapesDataset'
data_root = 'data/cityscapes/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (256, 256)
num_classes = 19
synthia_train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadPanopticAnnotations'),
    dict(type='Resize', img_scale=(1280, 760)),
    dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(
        type='GenPanopLabelsForMaskFormer',
        sigma=8,
        mode='train',
        num_classes=19,
        gen_instance_classids_from_zero=True),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundleMmdet'),
    dict(
        type='Collect',
        keys=[
            'img', 'gt_bboxes', 'gt_labels', 'gt_masks', 'gt_semantic_seg',
            'gt_panoptic_only_thing_classes', 'max_inst_per_class',
            'panoptic_labels_list', 'unique_labels_list', 'indices_list'
        ])
]
cityscapes_train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=(1024, 512)),
    dict(type='RandomCrop', crop_size=(256, 256)),
    dict(type='RandomFlip', prob=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundleMmdet'),
    dict(type='Collect', keys=['img'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=4,
    train=dict(
        type='UDADataset',
        source=dict(
            type='SynthiaDataset',
            data_root='data/synthia/',
            img_dir='RGB',
            depth_dir='',
            ann_dir='panoptic-labels-crowdth-0-for-daformer/synthia_panoptic',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='LoadPanopticAnnotations'),
                dict(type='Resize', img_scale=(1280, 760)),
                dict(
                    type='RandomCrop',
                    crop_size=(256, 256),
                    cat_max_ratio=0.75),
                dict(type='RandomFlip', prob=0.5),
                dict(
                    type='GenPanopLabelsForMaskFormer',
                    sigma=8,
                    mode='train',
                    num_classes=19,
                    gen_instance_classids_from_zero=True),
                dict(
                    type='Normalize',
                    mean=[123.675, 116.28, 103.53],
                    std=[58.395, 57.12, 57.375],
                    to_rgb=True),
                dict(type='DefaultFormatBundleMmdet'),
                dict(
                    type='Collect',
                    keys=[
                        'img', 'gt_bboxes', 'gt_labels', 'gt_masks',
                        'gt_semantic_seg', 'gt_panoptic_only_thing_classes',
                        'max_inst_per_class', 'panoptic_labels_list',
                        'unique_labels_list', 'indices_list'
                    ])
            ]),
        target=dict(
            type='CityscapesDataset',
            data_root='data/cityscapes/',
            img_dir='leftImg8bit/train',
            depth_dir='',
            ann_dir='gtFine_panoptic/cityscapes_panoptic_train_trainId',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='Resize', img_scale=(1024, 512)),
                dict(type='RandomCrop', crop_size=(256, 256)),
                dict(type='RandomFlip', prob=0.5),
                dict(
                    type='Normalize',
                    mean=[123.675, 116.28, 103.53],
                    std=[58.395, 57.12, 57.375],
                    to_rgb=True),
                dict(type='DefaultFormatBundleMmdet'),
                dict(type='Collect', keys=['img'])
            ]),
        rare_class_sampling=dict(
            min_pixels=3000, class_temp=0.01, min_crop_ratio=0.5)),
    val=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes',
        img_dir='leftImg8bit/val',
        depth_dir='',
        ann_dir='gtFine_panoptic/cityscapes_panoptic_val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/val',
        depth_dir='',
        ann_dir='gtFine_panoptic/cityscapes_panoptic_val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
uda = dict(
    type='DACS',
    alpha=0.999,
    pseudo_threshold=0.968,
    pseudo_weight_ignore_top=15,
    pseudo_weight_ignore_bottom=120,
    imnet_feature_dist_lambda=0.005,
    imnet_feature_dist_classes=[6, 7, 11, 12, 13, 14, 15, 16, 17, 18],
    imnet_feature_dist_scale_min_ratio=0.75,
    mix='class',
    blur=True,
    color_jitter_strength=0.2,
    color_jitter_probability=0.2,
    debug_img_interval=1000,
    print_grad_magnitude=False,
    share_src_backward=True,
    disable_mix_masks=False)
use_ddp_wrapper = True
optimizer = dict(
    type='AdamW',
    lr=6e-05,
    betas=(0.9, 0.999),
    weight_decay=0.01,
    paramwise_cfg=dict(
        custom_keys=dict(
            neck=dict(lr_mult=10.0),
            head=dict(lr_mult=10.0),
            pos_block=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0))))
optimizer_config = None
lr_config = dict(
    policy='poly',
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06,
    power=1.0,
    min_lr=0.0,
    by_epoch=False)
debug = False
n_gpus = 1
gpu_mtotal = 23000
total_train_time = '21:00:00'
n_cpus = 16
mem_per_cpu = 16000
machine = 'local'
euler_template_fname = 'euler_template_slurm_syn2city.sh'
only_eval = False
only_train = False
activate_auto_scale_lr = False
auto_scale_lr = dict(enable=False, base_batch_size=16)
print_layer_wise_lr = False
file_sys = 'Slurm'
launcher = None
generate_only_visuals_without_eval = False
seed = 0
evaluation = dict(
    interval=40000,
    metric=['mIoU', 'mPQ', 'mAP'],
    eval_type='maskrcnn_panoptic',
    dataset_name='cityscapes',
    gt_dir='data/cityscapes/gtFine/val',
    gt_dir_panop='data/cityscapes/gtFine_panoptic',
    num_samples_debug=12,
    post_proccess_params=dict(
        num_classes=19,
        ignore_label=255,
        mapillary_dataloading_style='OURS',
        label_divisor=1000,
        train_id_to_eval_id=[
            7, 8, 11, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31,
            32, 33, 0
        ],
        thing_list=[11, 12, 13, 14, 15, 16, 17, 18],
        mask_score_threshold=0.95,
        debug=False,
        dump_semantic_pred_as_numpy_array=False,
        load_semantic_pred_as_numpy_array=False,
        semantic_pred_numpy_array_location=None,
        use_semantic_decoder_for_instance_labeling=False,
        use_semantic_decoder_for_panoptic_labeling=False,
        nms_th=None,
        intersec_th=None,
        upsnet_mask_pruning=False,
        generate_thing_cls_panoptic_from_instance_pred=False),
    visuals_pan_eval=False,
    evalScale='2048x1024',
    panop_eval_folder=
    'edaps_experiments/exp-00001/work_dirs/local-exp00001/231101_1610_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_98271/panoptic_eval',
    panop_eval_temp_folder=
    'edaps_experiments/exp-00001/work_dirs/local-exp00001/231101_1610_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_98271/panoptic_eval/panop_eval_01-11-2023_16-10-23-911938',
    debug=False,
    out_dir=
    'edaps_experiments/exp-00001/work_dirs/local-exp00001/231101_1610_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_98271/panoptic_eval/panop_eval_01-11-2023_16-10-23-911938/visuals'
)
runner = dict(type='IterBasedRunner', max_iters=100)
name = '231101_1610_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_98271'
exp = 1
exp_root = 'edaps_experiments'
exp_sub = 'exp-00001'
name_dataset = ('synthia2cityscapes', )
name_architecture = ('maskrcnn_mitb5', )
name_encoder = ('mitb5', )
name_decoder = ('maskrcnn', )
name_uda = ('dacs_rcs0.01_cpl', )
name_opt = ('adamw_6e-05_pmTrue_poly10warm_1x1_40k', )
work_dir = 'edaps_experiments/exp-00001/work_dirs/local-exp00001/231101_1610_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_98271'
git_rev = 'd4240edba6884ac9d6961c90f575ffe95a645a13'
auto_resume = False
gpu_ids = [0]

2023-11-01 16:10:27,533 - mmdet - INFO - Set random seed to 0, deterministic: False
2023-11-01 16:10:27,533 - mmdet - INFO - DEBUG - PETROS 14-08-2023 - BEFORE MODEL BUILD
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/detectors/two_stage.py:29: UserWarning: DeprecationWarning: pretrained is deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is deprecated, '
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/backbones/mix_transformer.py:215: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead')
2023-11-01 16:10:31,852 - mmdet - INFO - Load mit checkpoint.
2023-11-01 16:10:31,854 - mmdet - INFO - load checkpoint from local path: pretrained/mit_b5.pth
2023-11-01 16:10:35,166 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-11-01 16:10:35,197 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-11-01 16:10:35,205 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-11-01 16:10:35,347 - mmdet - INFO - initialize DAFormerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-11-01 16:10:35,424 - mmdet - INFO - Load mit checkpoint.
2023-11-01 16:10:35,424 - mmdet - INFO - load checkpoint from local path: pretrained/mit_b5.pth
2023-11-01 16:10:35,857 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-11-01 16:10:35,886 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-11-01 16:10:35,896 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-11-01 16:10:36,037 - mmdet - INFO - initialize DAFormerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-11-01 16:10:36,114 - mmdet - INFO - Load mit checkpoint.
2023-11-01 16:10:36,114 - mmdet - INFO - load checkpoint from local path: pretrained/mit_b5.pth
2023-11-01 16:10:36,519 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-11-01 16:10:36,543 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-11-01 16:10:36,551 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-11-01 16:10:36,690 - mmdet - INFO - initialize DAFormerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-11-01 16:10:36,813 - mmdet - INFO - DEBUG - PETROS 14-08-2023 - MODEL IS READY
2023-11-01 16:10:36,815 - mmseg - INFO - Loaded annotations from : data/synthia/panoptic-labels-crowdth-0-for-daformer/synthia_panoptic.json
2023-11-01 16:10:47,400 - mmseg - INFO - Loaded 9400 images from data/synthia/RGB
2023-11-01 16:10:47,405 - mmseg - INFO - Loaded annotations from : data/cityscapes/gtFine_panoptic/cityscapes_panoptic_train_trainId.json
2023-11-01 16:10:47,893 - mmseg - INFO - Loaded 2975 images from data/cityscapes/leftImg8bit/train
2023-11-01 16:10:48,001 - mmseg - INFO - RCS Classes: [6, 7, 17, 18, 4, 3, 12, 5, 15, 13, 11, 10, 8, 0, 1, 2]
2023-11-01 16:10:48,002 - mmseg - INFO - RCS ClassProb: [1.55649453e-01 1.45927146e-01 1.30805254e-01 1.29144296e-01
 1.22819245e-01 1.22646019e-01 9.97279957e-02 5.53424992e-02
 3.33626680e-02 2.43163528e-03 2.00466975e-03 1.35448776e-04
 3.78220921e-06 8.31826052e-10 3.41141226e-10 1.11511794e-14]
2023-11-01 16:11:00,162 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-11-01 16:11:12,412 - mmseg - INFO - Loaded annotations from : data/cityscapes/gtFine_panoptic/cityscapes_panoptic_val.json
2023-11-01 16:11:12,539 - mmseg - INFO - Loaded 500 images from data/cityscapes/leftImg8bit/val
2023-11-01 16:11:12,540 - mmdet - INFO - Start running, host: ppolydorou@biwirender10, work_dir: /scratch_net/biwidl202/ppolydorou/project_edaps/edaps/edaps_experiments/exp-00001/work_dirs/local-exp00001/231101_1610_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_98271
2023-11-01 16:11:12,540 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHookUDA                        
 -------------------- 
after_train_iter:
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-11-01 16:11:12,540 - mmdet - INFO - workflow: [('train', 1)], max: 100 iters
2023-11-01 16:11:12,541 - mmdet - INFO - Checkpoints will be saved to /scratch_net/biwidl202/ppolydorou/project_edaps/edaps/edaps_experiments/exp-00001/work_dirs/local-exp00001/231101_1610_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_98271 by HardDiskBackend.
2023-11-01 16:11:12,541 - mmdet - INFO - The best checkpoint will be saved to edaps_experiments/exp-00001/work_dirs/local-exp00001/231101_1610_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_98271/panoptic_eval/panop_eval_01-11-2023_16-10-23-911938/visuals/231101_1610_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_98271 by HardDiskBackend
training with predefined config : configs/edaps/syn2cs_uda_warm_dfthings_rcs_croppl_a999_edaps_s0.py
Run job syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0
DEBUG - PETROS 20-08-2023 - data root is : data/synthia/
DEBUG - PETROS 19-08-2023 - MMSEG/CUSTOMDATASET - LOAD ANNOTATIONS PANOPTIC - DATASET TYPE:<class 'dict'>
DEBUG - PETROS 20-08-2023 - data root is : data/cityscapes/
DEBUG - PETROS 19-08-2023 - MMSEG/CUSTOMDATASET - LOAD ANNOTATIONS PANOPTIC - DATASET TYPE:<class 'dict'>
DEBUG - PETROS 20-08-2023 - data root is : data/cityscapes
DEBUG - PETROS 19-08-2023 - MMSEG/CUSTOMDATASET - LOAD ANNOTATIONS PANOPTIC - DATASET TYPE:<class 'dict'>
DEBUG_PETROS 31/10/2023 - MMDET/APIS/TRAIN.PY - Number of gpus for training is: 1
DEBUG_PETROS 31/10/2023 - MMDET/APIS/TRAIN.PY - Samples per gpu is: 1
DEBUG_PETROS 31/10/2023 - MMDET/APIS/TRAIN.PY - Batch_size: 1
2023-11-01 16:13:27,971 - mmdet - INFO - Iter [20/100]	lr: 6.156e-07, eta: 0:08:51, time: 6.648, data_time: 0.084, memory: 7339, decode.loss_seg: 2.7778, decode.acc_seg: 4.8804, contrastive loss: 2.4724, rpn.loss_rpn_cls: 0.6836, rpn.loss_rpn_bbox: 0.1491, roi.loss_cls: 2.2165, roi.acc: 10.9169, roi.loss_bbox: 0.1400, roi.loss_mask: 2.3991, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.2624, mix.decode.acc_seg: 12.1908
2023-11-01 16:15:27,903 - mmdet - INFO - Iter [40/100]	lr: 9.516e-07, eta: 0:06:19, time: 5.997, data_time: 0.017, memory: 7339, decode.loss_seg: 2.7805, decode.acc_seg: 8.2739, contrastive loss: 1.8244, rpn.loss_rpn_cls: 0.6747, rpn.loss_rpn_bbox: 0.1325, roi.loss_cls: 1.4705, roi.acc: 78.2422, roi.loss_bbox: 0.0872, roi.loss_mask: 1.9584, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.4967, mix.decode.acc_seg: 13.3791
2023-11-01 16:17:35,917 - mmdet - INFO - Iter [60/100]	lr: 9.676e-07, eta: 0:04:13, time: 6.401, data_time: 0.017, memory: 8115, decode.loss_seg: 2.7729, decode.acc_seg: 11.1827, contrastive loss: 2.5416, rpn.loss_rpn_cls: 0.6674, rpn.loss_rpn_bbox: 0.1602, roi.loss_cls: 0.8949, roi.acc: 93.1055, roi.loss_bbox: 0.1175, roi.loss_mask: 1.5125, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.4086, mix.decode.acc_seg: 16.0118
2023-11-01 16:19:37,397 - mmdet - INFO - Iter [80/100]	lr: 6.636e-07, eta: 0:02:05, time: 6.074, data_time: 0.017, memory: 8115, decode.loss_seg: 2.7977, decode.acc_seg: 14.7401, contrastive loss: 1.8165, rpn.loss_rpn_cls: 0.6546, rpn.loss_rpn_bbox: 0.1295, roi.loss_cls: 0.6436, roi.acc: 94.5508, roi.loss_bbox: 0.1172, roi.loss_mask: 1.3942, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.6833, mix.decode.acc_seg: 17.0597
2023-11-01 16:21:35,679 - mmdet - INFO - Saving checkpoint at 100 iterations
2023-11-01 16:22:03,182 - mmdet - INFO - Iter [100/100]	lr: 3.960e-08, eta: 0:00:00, time: 7.289, data_time: 0.017, memory: 8115, decode.loss_seg: 2.7445, decode.acc_seg: 13.8089, contrastive loss: 2.0659, rpn.loss_rpn_cls: 0.6457, rpn.loss_rpn_bbox: 0.1151, roi.loss_cls: 0.5503, roi.acc: 93.2910, roi.loss_bbox: 0.1639, roi.loss_mask: 1.4538, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.4460, mix.decode.acc_seg: 15.6017
