Running on node: biwirender11
In directory: /scratch_net/biwidl202/ppolydorou/project_edaps/edaps
Starting on: Tue Nov 21 21:51:25 CET 2023
Number of CPUs available: 5
SLURM_JOB_ID: 765473
CUDA_VISIBLE_DEVICES: 0
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/utils/setup_env.py:48: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
2023-11-21 21:51:48,383 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.5 (default, Sep  4 2020, 07:30:14) [GCC 7.3.0]
CUDA available: True
GPU 0: NVIDIA GeForce GTX TITAN X
CUDA_HOME: /usr
NVCC: Cuda compilation tools, release 11.2, V11.2.152
GCC: gcc (Debian 8.3.0-6) 8.3.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.8.0
MMCV: 1.6.1
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.25.1+ef53aeb
------------------------------------------------------------

2023-11-21 21:51:49,802 - mmdet - INFO - Distributed training: False
2023-11-21 21:51:51,308 - mmdet - INFO - Config:
checkpoint_config = dict(interval=5000, by_epoch=False, max_keep_ckpts=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
num_instance_classes = 8
norm_cfg = dict(type='BN', requires_grad=True)
find_unused_parameters = True
maskrcnn_losses_weights = 1.0
model = dict(
    type='MaskRCNNPanoptic',
    pretrained='pretrained/mit_b5.pth',
    backbone=dict(type='mit_b5', style='pytorch'),
    use_neck_feat_for_decode_head=False,
    decode_head=dict(
        type='DAFormerHead',
        in_channels=[64, 128, 320, 512],
        in_index=[0, 1, 2, 3],
        channels=256,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        decoder_params=dict(
            embed_dims=256,
            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),
            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),
            fusion_cfg=dict(
                type='aspp',
                sep=True,
                dilations=(1, 6, 12, 18),
                pool=False,
                act_cfg=dict(type='ReLU'),
                norm_cfg=dict(type='BN', requires_grad=True))),
        loss_decode=dict(
            type='CrossEntropyLossMmseg', use_sigmoid=False, loss_weight=1.0)),
    neck=dict(
        type='FPN',
        in_channels=[64, 128, 320, 512],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=8,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=8,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False),
        work_dir=
        'edaps_experiments/exp-00001/work_dirs/local-exp00001/231121_2151_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_f66ff'
    ),
    test_cfg=dict(
        mode='whole',
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CityscapesDataset'
data_root = 'data/cityscapes/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (256, 256)
num_classes = 19
synthia_train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadPanopticAnnotations'),
    dict(type='Resize', img_scale=(1280, 760)),
    dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(
        type='GenPanopLabelsForMaskFormer',
        sigma=8,
        mode='train',
        num_classes=19,
        gen_instance_classids_from_zero=True),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundleMmdet'),
    dict(
        type='Collect',
        keys=[
            'img', 'gt_bboxes', 'gt_labels', 'gt_masks', 'gt_semantic_seg',
            'gt_panoptic_only_thing_classes', 'max_inst_per_class',
            'panoptic_labels_list', 'unique_labels_list', 'indices_list'
        ])
]
cityscapes_train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=(1024, 512)),
    dict(type='RandomCrop', crop_size=(256, 256)),
    dict(type='RandomFlip', prob=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundleMmdet'),
    dict(type='Collect', keys=['img'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=4,
    train=dict(
        type='UDADataset',
        source=dict(
            type='SynthiaDataset',
            data_root='data/synthia/',
            img_dir='RGB',
            depth_dir='',
            ann_dir='panoptic-labels-crowdth-0-for-daformer/synthia_panoptic',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='LoadPanopticAnnotations'),
                dict(type='Resize', img_scale=(1280, 760)),
                dict(
                    type='RandomCrop',
                    crop_size=(256, 256),
                    cat_max_ratio=0.75),
                dict(type='RandomFlip', prob=0.5),
                dict(
                    type='GenPanopLabelsForMaskFormer',
                    sigma=8,
                    mode='train',
                    num_classes=19,
                    gen_instance_classids_from_zero=True),
                dict(
                    type='Normalize',
                    mean=[123.675, 116.28, 103.53],
                    std=[58.395, 57.12, 57.375],
                    to_rgb=True),
                dict(type='DefaultFormatBundleMmdet'),
                dict(
                    type='Collect',
                    keys=[
                        'img', 'gt_bboxes', 'gt_labels', 'gt_masks',
                        'gt_semantic_seg', 'gt_panoptic_only_thing_classes',
                        'max_inst_per_class', 'panoptic_labels_list',
                        'unique_labels_list', 'indices_list'
                    ])
            ]),
        target=dict(
            type='CityscapesDataset',
            data_root='data/cityscapes/',
            img_dir='leftImg8bit/train',
            depth_dir='',
            ann_dir='gtFine_panoptic/cityscapes_panoptic_train_trainId',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='Resize', img_scale=(1024, 512)),
                dict(type='RandomCrop', crop_size=(256, 256)),
                dict(type='RandomFlip', prob=0.5),
                dict(
                    type='Normalize',
                    mean=[123.675, 116.28, 103.53],
                    std=[58.395, 57.12, 57.375],
                    to_rgb=True),
                dict(type='DefaultFormatBundleMmdet'),
                dict(type='Collect', keys=['img'])
            ]),
        rare_class_sampling=dict(
            min_pixels=3000, class_temp=0.01, min_crop_ratio=0.5)),
    val=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes',
        img_dir='leftImg8bit/val',
        depth_dir='',
        ann_dir='gtFine_panoptic/cityscapes_panoptic_val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/val',
        depth_dir='',
        ann_dir='gtFine_panoptic/cityscapes_panoptic_val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
uda = dict(
    type='DACS',
    alpha=0.999,
    pseudo_threshold=0.968,
    pseudo_weight_ignore_top=15,
    pseudo_weight_ignore_bottom=120,
    imnet_feature_dist_lambda=0.005,
    imnet_feature_dist_classes=[6, 7, 11, 12, 13, 14, 15, 16, 17, 18],
    imnet_feature_dist_scale_min_ratio=0.75,
    mix='class',
    blur=True,
    color_jitter_strength=0.2,
    color_jitter_probability=0.2,
    debug_img_interval=5000,
    print_grad_magnitude=False,
    share_src_backward=True,
    disable_mix_masks=False)
use_ddp_wrapper = True
optimizer = dict(
    type='AdamW',
    lr=6e-05,
    betas=(0.9, 0.999),
    weight_decay=0.01,
    paramwise_cfg=dict(
        custom_keys=dict(
            neck=dict(lr_mult=10.0),
            head=dict(lr_mult=10.0),
            pos_block=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0))))
optimizer_config = None
lr_config = dict(
    policy='poly',
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06,
    power=1.0,
    min_lr=0.0,
    by_epoch=False)
debug = False
n_gpus = 1
gpu_mtotal = 23000
total_train_time = '24:00:00'
n_cpus = 16
mem_per_cpu = 16000
machine = 'local'
only_eval = False
only_train = False
activate_auto_scale_lr = False
auto_scale_lr = dict(enable=False, base_batch_size=16)
print_layer_wise_lr = False
file_sys = 'Slurm'
launcher = None
generate_only_visuals_without_eval = False
dump_predictions_to_disk = False
evaluate_from_saved_png_predictions = False
panop_eval_temp_folder_previous = None
exp_sub = 'exp-00001'
exp_root = 'edaps_experiments'
seed = 0
evaluation = dict(
    interval=20000,
    metric=['mIoU'],
    eval_type='maskrcnn_panoptic',
    dataset_name='cityscapes',
    gt_dir='data/cityscapes/gtFine/val',
    gt_dir_panop='data/cityscapes/gtFine_panoptic',
    num_samples_debug=12,
    post_proccess_params=dict(
        num_classes=19,
        ignore_label=255,
        mapillary_dataloading_style='OURS',
        label_divisor=1000,
        train_id_to_eval_id=[
            7, 8, 11, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31,
            32, 33, 0
        ],
        thing_list=[11, 12, 13, 14, 15, 16, 17, 18],
        mask_score_threshold=0.95,
        debug=False,
        dump_semantic_pred_as_numpy_array=False,
        load_semantic_pred_as_numpy_array=False,
        semantic_pred_numpy_array_location=None,
        use_semantic_decoder_for_instance_labeling=False,
        use_semantic_decoder_for_panoptic_labeling=False,
        nms_th=None,
        intersec_th=None,
        upsnet_mask_pruning=False,
        generate_thing_cls_panoptic_from_instance_pred=False),
    visuals_pan_eval=False,
    evalScale=None,
    evaluate_from_saved_numpy_predictions=False,
    evaluate_from_saved_png_predictions=False,
    panop_eval_folder=
    'edaps_experiments/exp-00001/work_dirs/local-exp00001/231121_2151_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_f66ff/panoptic_eval',
    panop_eval_temp_folder=
    'edaps_experiments/exp-00001/work_dirs/local-exp00001/231121_2151_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_f66ff/panoptic_eval/panop_eval_21-11-2023_21-51-48-275922',
    debug=False,
    out_dir=
    'edaps_experiments/exp-00001/work_dirs/local-exp00001/231121_2151_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_f66ff/panoptic_eval/panop_eval_21-11-2023_21-51-48-275922/visuals'
)
runner = dict(type='IterBasedRunner', max_iters=20000)
name = '231121_2151_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_f66ff'
exp = 1
name_dataset = 'synthia2cityscapes'
name_architecture = 'maskrcnn_mitb5'
name_encoder = 'mitb5'
name_decoder = 'maskrcnn'
name_uda = 'dacs_rcs0.01_cpl'
name_opt = 'adamw_6e-05_pmTrue_poly10warm_1x2_20k'
work_dir = 'edaps_experiments/exp-00001/work_dirs/local-exp00001/231121_2151_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_f66ff'
git_rev = 'ef53aebcba7f5c80ce917f39a0715d6ac5260c7c'
auto_resume = False
gpu_ids = [0]

2023-11-21 21:51:51,308 - mmdet - INFO - Set random seed to 0, deterministic: False
2023-11-21 21:51:51,309 - mmdet - INFO - DEBUG - PETROS 14-08-2023 - BEFORE MODEL BUILD
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/detectors/two_stage.py:29: UserWarning: DeprecationWarning: pretrained is deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is deprecated, '
/scratch_net/biwidl202/ppolydorou/project_edaps/edaps/mmdet/models/backbones/mix_transformer.py:215: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead')
2023-11-21 21:51:55,018 - mmdet - INFO - Load mit checkpoint.
2023-11-21 21:51:55,019 - mmdet - INFO - load checkpoint from local path: pretrained/mit_b5.pth
2023-11-21 21:51:58,174 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-11-21 21:51:58,203 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-11-21 21:51:58,211 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-11-21 21:51:58,339 - mmdet - INFO - initialize DAFormerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-11-21 21:51:58,409 - mmdet - INFO - Load mit checkpoint.
2023-11-21 21:51:58,409 - mmdet - INFO - load checkpoint from local path: pretrained/mit_b5.pth
2023-11-21 21:51:58,778 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-11-21 21:51:58,801 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-11-21 21:51:58,809 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-11-21 21:51:58,936 - mmdet - INFO - initialize DAFormerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-11-21 21:51:59,005 - mmdet - INFO - Load mit checkpoint.
2023-11-21 21:51:59,005 - mmdet - INFO - load checkpoint from local path: pretrained/mit_b5.pth
2023-11-21 21:51:59,466 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-11-21 21:51:59,488 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-11-21 21:51:59,495 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-11-21 21:51:59,619 - mmdet - INFO - initialize DAFormerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-11-21 21:51:59,739 - mmdet - INFO - DEBUG - PETROS 14-08-2023 - MODEL IS READY
2023-11-21 21:51:59,740 - mmseg - INFO - Loaded annotations from : data/synthia/panoptic-labels-crowdth-0-for-daformer/synthia_panoptic.json
2023-11-21 21:52:09,155 - mmseg - INFO - Loaded 9400 images from data/synthia/RGB
2023-11-21 21:52:09,159 - mmseg - INFO - Loaded annotations from : data/cityscapes/gtFine_panoptic/cityscapes_panoptic_train_trainId.json
2023-11-21 21:52:09,597 - mmseg - INFO - Loaded 2975 images from data/cityscapes/leftImg8bit/train
2023-11-21 21:52:09,689 - mmseg - INFO - RCS Classes: [6, 7, 17, 18, 4, 3, 12, 5, 15, 13, 11, 10, 8, 0, 1, 2]
2023-11-21 21:52:09,689 - mmseg - INFO - RCS ClassProb: [1.55649453e-01 1.45927146e-01 1.30805254e-01 1.29144296e-01
 1.22819245e-01 1.22646019e-01 9.97279957e-02 5.53424992e-02
 3.33626680e-02 2.43163528e-03 2.00466975e-03 1.35448776e-04
 3.78220921e-06 8.31826052e-10 3.41141226e-10 1.11511794e-14]
2023-11-21 21:52:20,457 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-11-21 21:52:30,659 - mmseg - INFO - Loaded annotations from : data/cityscapes/gtFine_panoptic/cityscapes_panoptic_val.json
2023-11-21 21:52:30,745 - mmseg - INFO - Loaded 500 images from data/cityscapes/leftImg8bit/val
2023-11-21 21:52:30,745 - mmdet - INFO - Start running, host: ppolydorou@biwirender11, work_dir: /scratch_net/biwidl202/ppolydorou/project_edaps/edaps/edaps_experiments/exp-00001/work_dirs/local-exp00001/231121_2151_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_f66ff
2023-11-21 21:52:30,746 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHookUDA                        
 -------------------- 
after_train_iter:
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHookUDA                        
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-11-21 21:52:30,746 - mmdet - INFO - workflow: [('train', 1)], max: 20000 iters
2023-11-21 21:52:30,747 - mmdet - INFO - Checkpoints will be saved to /scratch_net/biwidl202/ppolydorou/project_edaps/edaps/edaps_experiments/exp-00001/work_dirs/local-exp00001/231121_2151_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_f66ff by HardDiskBackend.
2023-11-21 21:52:30,747 - mmdet - INFO - The best checkpoint will be saved to edaps_experiments/exp-00001/work_dirs/local-exp00001/231121_2151_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_f66ff/panoptic_eval/panop_eval_21-11-2023_21-51-48-275922/visuals/231121_2151_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_f66ff by HardDiskBackend
_base_/default_runtime_mmdet_mr.py
_base_/models/maskrcnn_sepaspp_mitb5.py
_base_/datasets/uda_synthia_to_cityscapes_maskrcnn_panoptic.py
_base_/uda/dacs_a999_fdthings.py
_base_/schedules/adamw.py
_base_/schedules/poly10warm.py
Run job 231121_2151_syn2cs_dacs_rcs001_cpl_maskrcnn_mitb5_poly10warm_s0_f66ff
DEBUG - PETROS 20-08-2023 - data root is : data/synthia/
DEBUG - PETROS 19-08-2023 - MMSEG/CUSTOMDATASET - LOAD ANNOTATIONS PANOPTIC - DATASET TYPE:<class 'dict'>
DEBUG - PETROS 20-08-2023 - data root is : data/cityscapes/
DEBUG - PETROS 19-08-2023 - MMSEG/CUSTOMDATASET - LOAD ANNOTATIONS PANOPTIC - DATASET TYPE:<class 'dict'>
DEBUG - PETROS 20-08-2023 - data root is : data/cityscapes
DEBUG - PETROS 19-08-2023 - MMSEG/CUSTOMDATASET - LOAD ANNOTATIONS PANOPTIC - DATASET TYPE:<class 'dict'>
DEBUG_PETROS 31/10/2023 - MMDET/APIS/TRAIN.PY - Number of gpus for training is: 1
DEBUG_PETROS 31/10/2023 - MMDET/APIS/TRAIN.PY - Samples per gpu is: 2
DEBUG_PETROS 31/10/2023 - MMDET/APIS/TRAIN.PY - Workers per gpu is: 4
DEBUG_PETROS 31/10/2023 - MMDET/APIS/TRAIN.PY - Batch_size: 2
2023-11-21 22:00:01,165 - mmdet - INFO - Iter [50/20000]	lr: 1.955e-06, eta: 2 days, 1:40:57, time: 8.965, data_time: 0.065, memory: 4655, decode.loss_seg: 2.7845, decode.acc_seg: 8.7570, contrastive_loss: 1.4326, rpn.loss_rpn_cls: 0.6721, rpn.loss_rpn_bbox: 0.1323, roi.loss_cls: 1.5394, roi.acc: 58.8556, roi.loss_bbox: 0.1273, roi.loss_mask: 1.9628, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.5980, mix.decode.acc_seg: 12.8818
2023-11-21 22:07:23,852 - mmdet - INFO - Iter [100/20000]	lr: 3.940e-06, eta: 2 days, 1:14:59, time: 8.854, data_time: 0.014, memory: 4660, decode.loss_seg: 2.6731, decode.acc_seg: 24.0273, contrastive_loss: 1.5086, rpn.loss_rpn_cls: 0.6199, rpn.loss_rpn_bbox: 0.1228, roi.loss_cls: 0.4971, roi.acc: 93.3906, roi.loss_bbox: 0.1447, roi.loss_mask: 1.1713, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.3189, mix.decode.acc_seg: 24.5377
2023-11-21 22:15:10,324 - mmdet - INFO - Iter [150/20000]	lr: 5.916e-06, eta: 2 days, 1:53:52, time: 9.329, data_time: 0.014, memory: 4667, decode.loss_seg: 2.4346, decode.acc_seg: 42.9455, contrastive_loss: 1.3441, rpn.loss_rpn_cls: 0.4911, rpn.loss_rpn_bbox: 0.1311, roi.loss_cls: 0.3567, roi.acc: 91.6953, roi.loss_bbox: 0.1857, roi.loss_mask: 0.8571, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.2000, mix.decode.acc_seg: 40.4377
2023-11-21 22:22:36,532 - mmdet - INFO - Iter [200/20000]	lr: 7.881e-06, eta: 2 days, 1:35:59, time: 8.924, data_time: 0.014, memory: 4667, decode.loss_seg: 2.1556, decode.acc_seg: 47.1363, contrastive_loss: 1.3106, rpn.loss_rpn_cls: 0.3345, rpn.loss_rpn_bbox: 0.1029, roi.loss_cls: 0.3529, roi.acc: 91.3691, roi.loss_bbox: 0.2340, roi.loss_mask: 0.7307, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 1.1197, mix.decode.acc_seg: 49.9710
2023-11-21 22:30:57,449 - mmdet - INFO - Iter [250/20000]	lr: 9.836e-06, eta: 2 days, 2:34:19, time: 10.018, data_time: 0.015, memory: 4902, decode.loss_seg: 1.7836, decode.acc_seg: 54.1932, contrastive_loss: 1.3835, rpn.loss_rpn_cls: 0.2515, rpn.loss_rpn_bbox: 0.1088, roi.loss_cls: 0.4427, roi.acc: 87.5742, roi.loss_bbox: 0.3466, roi.loss_mask: 0.6833, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.9414, mix.decode.acc_seg: 53.0397
2023-11-21 22:38:48,307 - mmdet - INFO - Iter [300/20000]	lr: 1.178e-05, eta: 2 days, 2:37:31, time: 9.417, data_time: 0.014, memory: 4902, decode.loss_seg: 1.6294, decode.acc_seg: 55.0636, contrastive_loss: 1.5656, rpn.loss_rpn_cls: 0.2102, rpn.loss_rpn_bbox: 0.1056, roi.loss_cls: 0.4702, roi.acc: 86.7539, roi.loss_bbox: 0.4229, roi.loss_mask: 0.6446, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.7867, mix.decode.acc_seg: 54.9188
2023-11-21 22:46:31,064 - mmdet - INFO - Iter [350/20000]	lr: 1.372e-05, eta: 2 days, 2:29:59, time: 9.255, data_time: 0.014, memory: 4902, decode.loss_seg: 1.4880, decode.acc_seg: 57.8249, contrastive_loss: 1.6906, rpn.loss_rpn_cls: 0.2074, rpn.loss_rpn_bbox: 0.0988, roi.loss_cls: 0.4545, roi.acc: 86.5449, roi.loss_bbox: 0.4352, roi.loss_mask: 0.6348, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.8120, mix.decode.acc_seg: 54.4243
2023-11-21 22:54:36,328 - mmdet - INFO - Iter [400/20000]	lr: 1.564e-05, eta: 2 days, 2:40:47, time: 9.705, data_time: 0.014, memory: 4902, decode.loss_seg: 1.3192, decode.acc_seg: 62.0378, contrastive_loss: 1.4853, rpn.loss_rpn_cls: 0.2175, rpn.loss_rpn_bbox: 0.1199, roi.loss_cls: 0.4938, roi.acc: 84.6602, roi.loss_bbox: 0.5148, roi.loss_mask: 0.6129, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.6827, mix.decode.acc_seg: 58.5191
2023-11-21 23:02:47,309 - mmdet - INFO - Iter [450/20000]	lr: 1.756e-05, eta: 2 days, 2:51:32, time: 9.820, data_time: 0.015, memory: 4902, decode.loss_seg: 1.2376, decode.acc_seg: 63.0405, contrastive_loss: 1.5080, rpn.loss_rpn_cls: 0.1909, rpn.loss_rpn_bbox: 0.0964, roi.loss_cls: 0.4723, roi.acc: 85.0176, roi.loss_bbox: 0.5022, roi.loss_mask: 0.5925, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.6054, mix.decode.acc_seg: 59.7245
2023-11-21 23:10:15,721 - mmdet - INFO - Iter [500/20000]	lr: 1.946e-05, eta: 2 days, 2:30:49, time: 8.968, data_time: 0.014, memory: 4902, decode.loss_seg: 1.2129, decode.acc_seg: 61.4594, contrastive_loss: 1.3109, rpn.loss_rpn_cls: 0.1644, rpn.loss_rpn_bbox: 0.0927, roi.loss_cls: 0.4479, roi.acc: 85.5215, roi.loss_bbox: 0.4972, roi.loss_mask: 0.5771, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.6129, mix.decode.acc_seg: 59.2189
2023-11-21 23:18:20,512 - mmdet - INFO - Iter [550/20000]	lr: 2.136e-05, eta: 2 days, 2:33:58, time: 9.696, data_time: 0.014, memory: 4902, decode.loss_seg: 0.9982, decode.acc_seg: 68.6297, contrastive_loss: 1.3659, rpn.loss_rpn_cls: 0.1496, rpn.loss_rpn_bbox: 0.0909, roi.loss_cls: 0.4310, roi.acc: 85.9375, roi.loss_bbox: 0.4795, roi.loss_mask: 0.5691, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.5008, mix.decode.acc_seg: 61.4731
2023-11-21 23:26:18,218 - mmdet - INFO - Iter [600/20000]	lr: 2.324e-05, eta: 2 days, 2:31:25, time: 9.554, data_time: 0.014, memory: 4902, decode.loss_seg: 0.9937, decode.acc_seg: 68.4258, contrastive_loss: 1.5173, rpn.loss_rpn_cls: 0.1470, rpn.loss_rpn_bbox: 0.0894, roi.loss_cls: 0.4446, roi.acc: 85.2812, roi.loss_bbox: 0.4805, roi.loss_mask: 0.5607, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.5311, mix.decode.acc_seg: 60.8995
2023-11-21 23:33:41,315 - mmdet - INFO - Iter [650/20000]	lr: 2.512e-05, eta: 2 days, 2:10:51, time: 8.862, data_time: 0.014, memory: 4902, decode.loss_seg: 0.8806, decode.acc_seg: 71.3255, contrastive_loss: 1.4856, rpn.loss_rpn_cls: 0.1692, rpn.loss_rpn_bbox: 0.0966, roi.loss_cls: 0.4127, roi.acc: 86.5449, roi.loss_bbox: 0.4686, roi.loss_mask: 0.5291, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.4586, mix.decode.acc_seg: 61.8679
2023-11-21 23:41:04,569 - mmdet - INFO - Iter [700/20000]	lr: 2.698e-05, eta: 2 days, 1:52:15, time: 8.865, data_time: 0.014, memory: 4958, decode.loss_seg: 0.8966, decode.acc_seg: 69.7861, contrastive_loss: 1.5694, rpn.loss_rpn_cls: 0.1534, rpn.loss_rpn_bbox: 0.0883, roi.loss_cls: 0.4266, roi.acc: 86.0039, roi.loss_bbox: 0.4681, roi.loss_mask: 0.5151, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.4812, mix.decode.acc_seg: 64.0891
2023-11-21 23:49:03,185 - mmdet - INFO - Iter [750/20000]	lr: 2.884e-05, eta: 2 days, 1:50:17, time: 9.572, data_time: 0.015, memory: 4958, decode.loss_seg: 0.8136, decode.acc_seg: 72.5899, contrastive_loss: 1.3293, rpn.loss_rpn_cls: 0.1758, rpn.loss_rpn_bbox: 0.1161, roi.loss_cls: 0.4484, roi.acc: 84.7949, roi.loss_bbox: 0.5136, roi.loss_mask: 0.5124, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.4627, mix.decode.acc_seg: 63.0982
2023-11-21 23:56:48,519 - mmdet - INFO - Iter [800/20000]	lr: 3.068e-05, eta: 2 days, 1:42:14, time: 9.307, data_time: 0.014, memory: 4958, decode.loss_seg: 0.7219, decode.acc_seg: 72.0280, contrastive_loss: 1.4122, rpn.loss_rpn_cls: 0.1471, rpn.loss_rpn_bbox: 0.0930, roi.loss_cls: 0.4587, roi.acc: 84.6602, roi.loss_bbox: 0.5268, roi.loss_mask: 0.5109, src.loss_imnet_feat_dist: nan, mix.decode.loss_seg: 0.3740, mix.decode.acc_seg: 62.1712
slurmstepd: error: *** JOB 765473 ON biwirender11 CANCELLED AT 2023-11-22T00:02:33 ***
